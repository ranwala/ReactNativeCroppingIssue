@import ScanbotSDK;

#import "JSONMappings.h"
#import <Foundation/Foundation.h>
#import "SBSDKPolygon+JSON.h"
#import "HashUtils.h"
#import "NSString+FileUtils.h"
#import "MedicalCertificateMapping.h"
#import "InternalScanbotStorageUtils.h"
#import "SharedConfiguration.h"

NSString* DetectionResultAsJSONStringValue(SBSDKDocumentDetectionStatus status) {
    switch (status) {
        case SBSDKDocumentDetectionStatusOK:
            return @"OK";
        case SBSDKDocumentDetectionStatusOK_SmallSize:
            return @"OK_BUT_TOO_SMALL";
        case SBSDKDocumentDetectionStatusOK_BadAngles:
            return @"OK_BUT_BAD_ANGLES";
        case SBSDKDocumentDetectionStatusOK_BadAspectRatio:
            return @"OK_BUT_BAD_ASPECT_RATIO";
        case SBSDKDocumentDetectionStatusError_NothingDetected:
        case SBSDKDocumentDetectionStatusNotAcquired:
            return @"ERROR_NOTHING_DETECTED";
        case SBSDKDocumentDetectionStatusError_Brightness:
            return @"ERROR_TOO_DARK";
        case SBSDKDocumentDetectionStatusError_Noise:
            return @"ERROR_TOO_NOISY";
        default:
            return @"";
    }
}

NSString* PageImageSourceAsJSONStringValue(SBSDKPageImageSource pageImageSource) {
    switch (pageImageSource) {
        case SBSDKPageImageSourceManualSnap:
            return @"MANUAL_SNAP";
        case SBSDKPageImageSourceAutoSnap:
            return @"AUTO_SNAP";
        case SBSDKPageImageSourceVideoFrame:
            return @"CAMERA_FRAME";
        case SBSDKPageImageSourceUndefined:
        case SBSDKPageImageSourceImport:
        default:
            return @"UNKNOWN";
    }
}

NSString* ImageFilterAsJSONStringValue(SBSDKImageFilterType filter) {
    switch (filter) {
        case SBSDKImageFilterTypeNone: return @"NONE";
        case SBSDKImageFilterTypeColor: return @"COLOR_ENHANCED";
        case SBSDKImageFilterTypeGray: return @"GRAYSCALE";
        case SBSDKImageFilterTypePureGray: return @"PURE_GRAYSCALE";
        case SBSDKImageFilterTypeBinarized: return @"BINARIZED";
        case SBSDKImageFilterTypeColorDocument: return @"COLOR_DOCUMENT";
        case SBSDKImageFilterTypePureBinarized: return @"PURE_BINARIZED";
        case SBSDKImageFilterTypeBackgroundClean: return @"BACKGROUND_CLEAN";
        case SBSDKImageFilterTypeBlackAndWhite: return @"BLACK_AND_WHITE";
        case SBSDKImageFilterTypeOtsuBinarization: return @"OTSU_BINARIZATION";
        case SBSDKImageFilterTypeDeepBinarization: return @"DEEP_BINARIZATION";
        case SBSDKImageFilterTypeLowLightBinarization: return @"LOW_LIGHT_BINARIZATION";
        case SBSDKImageFilterTypeLowLightBinarization2: return @"LOW_LIGHT_BINARIZATION_2";
        case SBSDKImageFilterTypeEdgeHighlight: return @"EDGE_HIGHLIGHT";
        default: return @"";
    }
}

SBSDKImageFilterType filterIdFromFilterNameString(NSString* filterName) {
    if (!filterName) {
        return SBSDKImageFilterTypeNone;
    }
    
    if ([filterName isEqualToString:@"COLOR_ENHANCED"]) return SBSDKImageFilterTypeColor;
    if ([filterName isEqualToString:@"GRAYSCALE"]) return SBSDKImageFilterTypeGray;
    if ([filterName isEqualToString:@"PURE_GRAYSCALE"]) return SBSDKImageFilterTypePureGray;
    if ([filterName isEqualToString:@"BINARIZED"]) return SBSDKImageFilterTypeBinarized;
    if ([filterName isEqualToString:@"COLOR_DOCUMENT"]) return SBSDKImageFilterTypeColorDocument;
    if ([filterName isEqualToString:@"PURE_BINARIZED"]) return SBSDKImageFilterTypePureBinarized;
    if ([filterName isEqualToString:@"BACKGROUND_CLEAN"]) return SBSDKImageFilterTypeBackgroundClean;
    if ([filterName isEqualToString:@"BLACK_AND_WHITE"]) return SBSDKImageFilterTypeBlackAndWhite;
    if ([filterName isEqualToString:@"OTSU_BINARIZATION"]) return SBSDKImageFilterTypeOtsuBinarization;
    if ([filterName isEqualToString:@"DEEP_BINARIZATION"]) return SBSDKImageFilterTypeDeepBinarization;
    if ([filterName isEqualToString:@"LOW_LIGHT_BINARIZATION"]) return SBSDKImageFilterTypeLowLightBinarization;
    if ([filterName isEqualToString:@"LOW_LIGHT_BINARIZATION_2"]) return SBSDKImageFilterTypeLowLightBinarization2;
    if ([filterName isEqualToString:@"EDGE_HIGHLIGHT"]) return SBSDKImageFilterTypeEdgeHighlight;
    return SBSDKImageFilterTypeNone;
}

SBSDKPDFRendererPageSize pageSizeFromPagesizeNameString(NSString* pageSizeName) {
    if (!pageSizeName) {
        return SBSDKPDFRendererPageSizeAuto;
    }
    
    if ([pageSizeName isEqualToString:@"FROM_IMAGE"]) return SBSDKPDFRendererPageSizeFromImage;
    if ([pageSizeName isEqualToString:@"A4"]) return SBSDKPDFRendererPageSizeA4;
    if ([pageSizeName isEqualToString:@"FIXED_A4"]) return SBSDKPDFRendererPageSizeFixedA4;
    if ([pageSizeName isEqualToString:@"US_LETTER"]) return SBSDKPDFRendererPageSizeUSLetter;
    if ([pageSizeName isEqualToString:@"FIXED_US_LETTER"]) return SBSDKPDFRendererPageSizeFixedUSLetter;
    if ([pageSizeName isEqualToString:@"AUTO_LOCALE"]) return SBSDKPDFRendererPageSizeAutoLocale;
    if ([pageSizeName isEqualToString:@"AUTO"]) return SBSDKPDFRendererPageSizeAuto;
    return SBSDKPDFRendererPageSizeAuto;
}

NSString* MRZFieldNameAsString(SBSDKMachineReadableZoneRecognizerFieldName name) {
    switch (name) {
        case SBSDKMachineReadableZoneRecognizerFieldNameUnknown:
            return @"Unknown";
        case SBSDKMachineReadableZoneRecognizerFieldNameDocumentCode:
            return @"DocumentCode";
        case SBSDKMachineReadableZoneRecognizerFieldNameIssuingStateOrOrganization:
            return @"IssuingStateOrOrganization";
        case SBSDKMachineReadableZoneRecognizerFieldNameDepartmentOfIssuance:
            return @"DepartmentOfIssuance";
        case SBSDKMachineReadableZoneRecognizerFieldNameFirstName:
            return @"FirstName";
        case SBSDKMachineReadableZoneRecognizerFieldNameLastName:
            return @"LastName";
        case SBSDKMachineReadableZoneRecognizerFieldNameNationality:
            return @"Nationality";
        case SBSDKMachineReadableZoneRecognizerFieldNameDateOfBirth:
            return @"DateOfBirth";
        case SBSDKMachineReadableZoneRecognizerFieldNameGender:
            return @"Gender";
        case SBSDKMachineReadableZoneRecognizerFieldNameDateOfExpiry:
            return @"DateOfExpiry";
        case SBSDKMachineReadableZoneRecognizerFieldNamePersonalNumber:
            return @"PersonalNumber";
        case SBSDKMachineReadableZoneRecognizerFieldNameTravelDocumentType:
            return @"TravelDocumentType";
        case SBSDKMachineReadableZoneRecognizerFieldNameOptional1:
            return @"Optional1";
        case SBSDKMachineReadableZoneRecognizerFieldNameOptional2:
            return @"Optional2";
        case SBSDKMachineReadableZoneRecognizerFieldNameDiscreetIssuingStateOrOrganization:
            return @"DiscreetIssuingStateOrOrganization";
        default:
            return @"";
    }
}

NSString* HealthInsuranceFieldTypeAsString(SBSDKHealthInsuranceCardFieldType type) {
    if (type == SBSDKHealthInsuranceCardFieldTypeSurname)
        return @"SURNAME";
    if (type == SBSDKHealthInsuranceCardFieldTypeGivenName)
        return @"GIVEN_NAME";
    if (type == SBSDKHealthInsuranceCardFieldTypeCardNumber)
        return @"CARD_NUMBER";
    if (type == SBSDKHealthInsuranceCardFieldTypeDateOfBirth)
        return @"DATE_OF_BIRTH";
    if (type == SBSDKHealthInsuranceCardFieldTypeInstitutionName)
        return @"INSTITUTION_NAME";
    if (type == SBSDKHealthInsuranceCardFieldTypeInstitutionNumber)
        return @"INSTITUTION_NUMBER";
    if (type == SBSDKHealthInsuranceCardFieldTypeCardExpirationDate)
        return @"CARD_EXPIRATION_DATE";
    if (type == SBSDKHealthInsuranceCardFieldTypePersonalIdentificationNumber)
        return @"PERSONAL_IDENTIFICATION_NUMBER";
    return @"";
}

NSDictionary* CGSizeAsJson(CGSize size) {
    return @{@"width": @(size.width),
             @"height": @(size.height)};
}

CGSize CGSizeFromJson(NSDictionary* json) {
    return CGSizeMake(((NSNumber*)json[@"width"]).floatValue,
                      ((NSNumber*)json[@"height"]).floatValue);
}

NSDictionary* dictionaryFromPage(SBSDKUIPage* page) {
    if (!page.originalImageURL) {
        return NULL;
    }
    
    @try {
        NSMutableDictionary* result = @{
                                        @"pageId": [page.pageFileUUID UUIDString],
                                        @"polygon": (page.polygon ? [page.polygon polygonPoints] : [NSArray new]),
                                        @"filter": ImageFilterAsJSONStringValue(page.filter),
                                        @"detectionResult": DetectionResultAsJSONStringValue(page.status),
                                        @"pageImageSource": PageImageSourceAsJSONStringValue(page.pageImageSource),
                                        @"originalImageFileUri": uriWithMinihash(page.originalImageURL),
                                        @"originalPreviewImageFileUri": uriWithMinihash([SBSDKUIPageFileStorage.defaultStorage previewImageURLWithPageFileID:page.pageFileUUID pageFileType:SBSDKUIPageFileTypeOriginal]),
                                        }.mutableCopy;
        
        if (!CGSizeEqualToSize(page.documentImageSizeLimit, CGSizeZero)) {
            result[@"documentImageSizeLimit"] = CGSizeAsJson(page.documentImageSizeLimit);
        }
        
        NSURL* documentImageUrl = page.documentImageURL;
        if (documentImageUrl) {
            NSURL* documentPreviewImageUrl = [SBSDKUIPageFileStorage.defaultStorage previewImageURLWithPageFileID:page.pageFileUUID
                                                                                                     pageFileType:SBSDKUIPageFileTypeDocument];
            [result setObject:uriWithMinihash(documentImageUrl) forKey:@"documentImageFileUri"];
            [result setObject:uriWithMinihash(documentPreviewImageUrl) forKey:@"documentPreviewImageFileUri"];
        }
        
        return result;
    } @catch (NSException *exception) {
        NSLog(@"%@", [exception description]);
        return NULL;
    }
}

NSDictionary* dictionaryFromExtractedPage(SBSDKUIPage* page) {
    NSMutableDictionary* result = [dictionaryFromPage(page) mutableCopy];
    [result setObject:@"OK" forKey:@"detectionResult"];
    
    NSString* originalImageFileUri = [result objectForKey:@"originalImageFileUri"];
    
    if (![result objectForKey:@"documentImageFileUri"]) {
        [result setObject:originalImageFileUri forKey:@"documentImageFileUri"];
    }

    NSString* originalPreviewImageFileUri = [result objectForKey:@"originalImageFileUri"];
    if (![result objectForKey:@"documentPreviewImageFileUri"]) {
        [result setObject:originalPreviewImageFileUri forKey:@"documentPreviewImageFileUri"];
    }
    
    return result;
}

NSArray* stringArrayFromNSURLArray(NSArray* urls) {
    NSMutableArray* outArray = [[NSMutableArray alloc] init];
    for (NSURL* url in urls) {
        [outArray addObject:[url path]];
    }
    return outArray;
}

CGPoint CGPointFromNSArray(NSDictionary<NSString*, NSNumber*>* pt) {
    CGFloat x = [pt[@"x"] doubleValue];
    CGFloat y = [pt[@"y"] doubleValue];
    
    return CGPointMake(x, y);
}

SBSDKUIPage* pageFromDictionary(NSDictionary* dict) {
    SBSDKPolygon* poly = nil;
    NSArray* points = [dict objectForKey:@"polygon"];
    if (points != nil && [points count] == 4) {
        poly = [[SBSDKPolygon alloc] initWithNormalizedPointA:CGPointFromNSArray(points[0])
                                                       pointB:CGPointFromNSArray(points[1])
                                                       pointC:CGPointFromNSArray(points[2])
                                                       pointD:CGPointFromNSArray(points[3])];
        poly.detectionStatus = detectionStatusFromJSONString(dict[@"detectionResult"]);
    }
    
    NSUUID* uuid = [[NSUUID alloc] initWithUUIDString:dict[@"pageId"]];
    CGSize documentImageSizeLimit = dict[@"documentImageSizeLimit"] ? CGSizeFromJson(dict[@"documentImageSizeLimit"]) : CGSizeZero;
    
    return [[SBSDKUIPage alloc] initWithPageFileID:uuid
                                           polygon:poly
                                            filter:filterIdFromFilterNameString([dict objectForKey:@"filter"])
                            documentImageSizeLimit:documentImageSizeLimit];
}

NSString* MRZDocumentTypeAsString(SBSDKMachineReadableZoneRecognizerResultDocumentType documentType) {
    switch (documentType) {
        case SBSDKMachineReadableZoneRecognizerResultDocumentTypePassport:
            return @"PASSPORT";
        case SBSDKMachineReadableZoneRecognizerResultDocumentTypeTravelDocument:
            return @"TRAVEL_DOCUMENT";
        case SBSDKMachineReadableZoneRecognizerResultDocumentTypeVisa:
            return @"VISA";
        case SBSDKMachineReadableZoneRecognizerResultDocumentTypeIDCard:
            return @"ID_CARD";
        case SBSDKMachineReadableZoneRecognizerResultDocumentTypeUndefined:
            return @"UNDEFINED";
        default:
            return @"UNDEFINED";
    }
}

NSDictionary* MRZRecognizerResultAsDictionary(SBSDKMachineReadableZoneRecognizerResult* mrzResult) {
    NSMutableArray* fields = [NSMutableArray array];
    for (SBSDKMachineReadableZoneRecognizerField* field in mrzResult.fields) {
        [fields addObject:@{@"name": MRZFieldNameAsString(field.fieldName),
                            @"value": field.value,
                            @"confidence": @(field.averageRecognitionConfidence)
                            }];
    }

    NSMutableDictionary* result = @{
                                    @"recognitionSuccessful": @(mrzResult.recognitionSuccessful),
                                    @"documentType": MRZDocumentTypeAsString(mrzResult.documentType),
                                    @"checkDigitsCount": @(mrzResult.checkDigitsCount),
                                    @"validCheckDigitsCount": @(mrzResult.validCheckDigitsCount),
                                    @"fields": fields
                                    }.mutableCopy;

    return result;
}

NSDictionary* EHICRecognizerResultAsDictionary(SBSDKHealthInsuranceCardRecognitionResult* ehicResult) {
    NSMutableArray* fields = [NSMutableArray array];
    for (SBSDKHealthInsuranceCardField* field in ehicResult.fields) {
        [fields addObject:@{@"type": HealthInsuranceFieldTypeAsString(field.type),
                            @"value": field.value,
                            @"confidence": @(field.confidence)
                            }];
    }

    NSMutableDictionary* result = @{@"fields": fields}.mutableCopy;

    return result;
}

NSArray* MapTextDataScannerResult(SBSDKUITextDataScannerStepResult* stepResult) {
    NSDictionary *step = @{@"tag": stepResult.stepTag,
                             @"text": stepResult.text,
                             @"confidence": @(stepResult.confidence)};
    NSMutableArray *result = [[NSMutableArray alloc] init];
    [result addObject:step];
    return result;
}

SBSDKGenericDocumentRootType* gdrRootTypeFromString(NSString* string) {
    if ([string isEqual: @"DeIdFront"]) {
        return SBSDKGenericDocumentRootType.deIdCardFront;
    }
    if ([string isEqual: @"DeIdBack"]) {
        return SBSDKGenericDocumentRootType.deIdCardBack;
    }
    if ([string isEqual: @"DePassport"]) {
        return SBSDKGenericDocumentRootType.dePassport;
    }
    if ([string isEqual: @"DeDriverLicenseFront"]) {
        return SBSDKGenericDocumentRootType.deDriverLicenseFront;
    }
    if ([string isEqual: @"DeDriverLicenseBack"]) {
        return SBSDKGenericDocumentRootType.deDriverLicenseBack;
    }

    return NULL;
}

NSArray<SBSDKGenericDocumentRootType*>* gdrRootTypesFromJsonArray(NSArray<NSString*>* jsonArray) {
    NSMutableArray<SBSDKGenericDocumentRootType*>* outArray = [[NSMutableArray alloc] init];
    for (NSString* string in jsonArray) {
        SBSDKGenericDocumentRootType* rootType = gdrRootTypeFromString(string);
        if (rootType == NULL) {
            continue;
        }
        [outArray addObject: rootType];
    }
    return outArray;
}

NSArray<SBSDKGenericDocumentRootType*>* extractGdrDocumentTypes(NSDictionary* configuration) {
    NSArray* jsonArray = [configuration objectForKey:@"acceptedDocumentTypes"];
    if (!jsonArray || [jsonArray count] == 0) {
        return @[
            SBSDKGenericDocumentRootType.deIdCardBack,
            SBSDKGenericDocumentRootType.deIdCardFront
        ];
    }
    return gdrRootTypesFromJsonArray(jsonArray);
}

void addFieldPropertyFromDictionary(NSMutableDictionary* fields,
                                    NSDictionary* configuration,
                                    NSString* key,
                                    NSString* fieldName
) {
    NSString* value = [configuration objectForKey:key];
    if (value == NULL) {
        return;
    }
    [fields setObject: value forKey: fieldName];
}

NSMutableDictionary<NSString*, NSString*>* extractIdCardScannerFieldProperties(NSDictionary* configuration,
                                                                               NSArray<SBSDKGenericDocumentRootType*> *genericTypes)
{
    NSMutableDictionary<NSString*, NSString*>* fieldProperties = [[NSMutableDictionary alloc] init];
    
    NSDictionary* deIdCardBackFields = @{
        @"fieldAddressTitle": SBSDKGenericDocumentDeIdCardBackAddressFieldNormalizedName,
        @"fieldEyeColorTitle": SBSDKGenericDocumentDeIdCardBackEyeColorFieldNormalizedName,
        @"fieldHeightTitle": SBSDKGenericDocumentDeIdCardBackHeightFieldNormalizedName,
        @"fieldIssueDateTitle": SBSDKGenericDocumentDeIdCardBackIssueDateFieldNormalizedName,
        @"fieldIssuingAuthorityTitle": SBSDKGenericDocumentDeIdCardBackIssuingAuthorityFieldNormalizedName,
        @"fieldMRZTitle": SBSDKGenericDocumentDeIdCardBackRawMRZFieldNormalizedName,
        @"fieldPseudonymTitle": SBSDKGenericDocumentDeIdCardBackPseudonymFieldNormalizedName
    };
    
    NSDictionary* deIdCardFrontFields = @{
        @"fieldBirthDateTitle": SBSDKGenericDocumentDeIdCardFrontBirthDateFieldNormalizedName,
        @"fieldBirthPlaceTitle": SBSDKGenericDocumentDeIdCardFrontBirthplaceFieldNormalizedName,
        @"fieldGivenNamesTitle": SBSDKGenericDocumentDeIdCardFrontGivenNamesFieldNormalizedName,
        @"fieldIDTitle": SBSDKGenericDocumentDeIdCardFrontIDFieldNormalizedName,
        @"fieldExpiryDateTitle": SBSDKGenericDocumentDeIdCardFrontExpiryDateFieldNormalizedName,
        @"fieldNationalityTitle": SBSDKGenericDocumentDeIdCardFrontNationalityFieldNormalizedName,
        @"fieldPhotoTitle": SBSDKGenericDocumentDeIdCardFrontPhotoFieldNormalizedName,
        @"fieldPINTitle": SBSDKGenericDocumentDeIdCardFrontPINFieldNormalizedName,
        @"fieldSignatureTitle": SBSDKGenericDocumentDeIdCardFrontSignatureFieldNormalizedName,
        @"fieldSurnameTitle": SBSDKGenericDocumentDeIdCardFrontSurnameFieldNormalizedName
    };
    
    NSDictionary* dePassportFields = @{
        @"fieldBirthDateTitle": SBSDKGenericDocumentDePassportBirthDateFieldNormalizedName,
        @"fieldBirthPlaceTitle": SBSDKGenericDocumentDePassportBirthplaceFieldNormalizedName,
        @"fieldCountryCodeTitle": SBSDKGenericDocumentDePassportCountryCodeFieldNormalizedName,
        @"fieldExpiryDateTitle": SBSDKGenericDocumentDePassportExpiryDateFieldNormalizedName,
        @"fieldGenderTitle": SBSDKGenericDocumentDePassportGenderFieldNormalizedName,
        @"fieldGivenNamesTitle": SBSDKGenericDocumentDePassportGivenNamesFieldNormalizedName,
        @"fieldIDTitle": SBSDKGenericDocumentDePassportIDFieldNormalizedName,
        @"fieldIssueDateTitle": SBSDKGenericDocumentDePassportIssueDateFieldNormalizedName,
        @"fieldIssuingAuthorityTitle": SBSDKGenericDocumentDePassportIssuingAuthorityFieldNormalizedName,
        @"fieldMaidenNameTitle": SBSDKGenericDocumentDePassportMaidenNameFieldNormalizedName,
        @"fieldNationalityTitle": SBSDKGenericDocumentDePassportNationalityFieldNormalizedName,
        @"fieldPassportTypeTitle": SBSDKGenericDocumentDePassportPassportTypeFieldNormalizedName,
        @"fieldPhotoTitle": SBSDKGenericDocumentDePassportPhotoFieldNormalizedName,
        @"fieldMRZTitle": SBSDKGenericDocumentDePassportRawMRZFieldNormalizedName,
        @"fieldSignatureTitle": SBSDKGenericDocumentDePassportSignatureFieldNormalizedName,
        @"fieldSurnameTitle": SBSDKGenericDocumentDePassportSurnameFieldNormalizedName
    };
    
    // De ID Card (BACK)
    if ([genericTypes containsObject:SBSDKGenericDocumentRootType.deIdCardBack]) {
        for (NSString* key in deIdCardBackFields.allKeys) {
            addFieldPropertyFromDictionary(fieldProperties, configuration, key, [deIdCardBackFields objectForKey:key]);
        }
    }
    
    // De ID Card (FRONT)
    if ([genericTypes containsObject:SBSDKGenericDocumentRootType.deIdCardFront]) {
        for (NSString* key in deIdCardFrontFields.allKeys) {
            addFieldPropertyFromDictionary(fieldProperties, configuration, key, [deIdCardFrontFields objectForKey:key]);
        }
    }
    
    // De Passport (FRONT & BACK)
    if ([genericTypes containsObject:SBSDKGenericDocumentRootType.dePassport]) {
        for (NSString* key in dePassportFields.allKeys) {
            addFieldPropertyFromDictionary(fieldProperties, configuration, key, [dePassportFields objectForKey:key]);
        }
    }
    
    return fieldProperties.mutableCopy;
}

NSMutableDictionary<NSString*, NSString*>* extractIdCardScannerDocumentProperties(NSDictionary* configuration,
                                                                                  NSArray<SBSDKGenericDocumentRootType*> *genericTypes
) {
    NSMutableDictionary<NSString*, NSString*>* typeProperties = [[NSMutableDictionary alloc] init];
    
    NSString* text = [configuration objectForKey:@"deIdCardBackDocumentTitle"];
    if (text && [genericTypes containsObject:SBSDKGenericDocumentRootType.deIdCardBack]) {
        [typeProperties setValue:text forKey:SBSDKGenericDocumentDeIdCardBackDocumentType];
    }
    
    text = [configuration objectForKey:@"deIdCardFrontDocumentTitle"];
    if (text && [genericTypes containsObject:SBSDKGenericDocumentRootType.deIdCardFront]) {
        [typeProperties setValue:text forKey:SBSDKGenericDocumentDeIdCardFrontDocumentType];
    }
    
    text = [configuration objectForKey:@"dePassportDocumentTitle"];
    if (text && [genericTypes containsObject:SBSDKGenericDocumentRootType.dePassport]) {
        [typeProperties setValue:text forKey:SBSDKGenericDocumentDePassportDocumentType];
    }

    return typeProperties;
}

NSDictionary* extractMedicalCertificateScannerResult(SBSDKMedicalCertificateRecognizerResult* result) {
    NSMutableDictionary* jsonData = [[NSMutableDictionary alloc] init];
    
    // Map Form Type
    jsonData[@"formType"] = formTypeToJson(result.formType);
    
    // Map Patient Fields
    NSMutableDictionary* jsonPatientFieldsMap = [[NSMutableDictionary alloc] init];
    if (result.patientFields) {
        for (SBSDKMedicalCertificateRecognizerResultPatientField* field in result.patientFields) {
            NSString* jsonKey = patientFieldTypeToJson(field.type);
            jsonPatientFieldsMap[jsonKey] = field.value;
        }
    }
    jsonData[@"patientData"] = jsonPatientFieldsMap;
    
    // Map Checkboxes
    NSMutableDictionary* jsonCheckboxesMap = [[NSMutableDictionary alloc] init];
    if (result.checkboxes) {
        for (SBSDKMedicalCertificateRecognizerCheckboxResult* checkbox in result.checkboxes) {
            NSString* jsonKey = checkboxTypeToJson(checkbox.type);
            jsonCheckboxesMap[jsonKey] = @{
                @"isChecked": @(checkbox.isChecked),
                @"confidence": @(checkbox.confidenceValue)
            };
        }
    }
    jsonData[@"checkboxes"] = jsonCheckboxesMap;
    
    // Map Dates
    NSMutableDictionary* jsonDates = [[NSMutableDictionary alloc] init];
    if (result.dates) {
        for (SBSDKMedicalCertificateRecognizerDateResult* date in result.dates) {
            NSString* jsonKey = dateResultTypeToJson(date.dateRecordType);
            jsonDates[jsonKey] = @{
                @"dateString": date.dateString,
                @"recognitionConfidence": @(date.recognitionConfidence),
            };
        }
    }
    jsonData[@"dates"] = jsonDates;
    
    if(result.image) {
        NSString *outputImageFilePath = [InternalScanbotStorageUtils generatePluginStorageFilePath:@"jpg"];
        
        if ([InternalScanbotStorageUtils saveImage:outputImageFilePath
                                     image:result.image
                                   quality:SharedConfiguration.defaultConfiguration.sdkConfiguration.storageImageQuality]){
            jsonData[@"imageFileUri"] = outputImageFilePath;
        }
        
    }
    
    return jsonData;
}

UIInterfaceOrientationMask orientationLockModeToUIInterfaceOrientationMaskFromConfig(NSDictionary* configuration, NSString* key) {
    return orientationLockModeToUIInterfaceOrientationMask([configuration objectForKey:key]);
}

UIInterfaceOrientationMask orientationLockModeToUIInterfaceOrientationMask(NSString* value) {
    if (value) {
        if ([value isEqualToString:@"PORTRAIT"])              return UIInterfaceOrientationMaskPortrait;
        if ([value isEqualToString:@"PORTRAIT_UPSIDE_DOWN"])  return UIInterfaceOrientationMaskPortrait;
        if ([value isEqualToString:@"LANDSCAPE_LEFT"])        return UIInterfaceOrientationMaskLandscapeLeft;
        if ([value isEqualToString:@"LANDSCAPE_RIGHT"])       return UIInterfaceOrientationMaskLandscapeRight;
        if ([value isEqualToString:@"LANDSCAPE"])             return UIInterfaceOrientationMaskLandscapeRight;
    }
    return UIInterfaceOrientationMaskAll;
}

SBSDKTIFFImageWriterCompressionOptions tiffCompressionOptionFromStringName(NSString* compressionName, SBSDKTIFFImageWriterCompressionOptions defaultValue) {
    if (!compressionName) {
        return defaultValue;
    }

    if ([compressionName isEqualToString:@"CCITTRLE"]) return COMPRESSION_CCITTRLE;
    if ([compressionName isEqualToString:@"CCITTFAX3"]) return COMPRESSION_CCITTFAX3;
    if ([compressionName isEqualToString:@"CCITT_T4"]) return COMPRESSION_CCITT_T4;
    if ([compressionName isEqualToString:@"CCITTFAX4"]) return COMPRESSION_CCITTFAX4;
    if ([compressionName isEqualToString:@"CCITT_T6"]) return COMPRESSION_CCITT_T6;
    if ([compressionName isEqualToString:@"CCITTRLEW"]) return COMPRESSION_CCITTRLEW;
    if ([compressionName isEqualToString:@"LZW"]) return COMPRESSION_LZW;
    if ([compressionName isEqualToString:@"PACKBITS"]) return COMPRESSION_PACKBITS;
    if ([compressionName isEqualToString:@"DEFLATE"]) return COMPRESSION_DEFLATE;
    if ([compressionName isEqualToString:@"ADOBE_DEFLATE"]) return COMPRESSION_ADOBE_DEFLATE;
    return COMPRESSION_NONE;
}

void mapMedicalCertificateErrorDialogTexts(NSDictionary *configuration, SBSDKUIMedicalCertificateScannerTextConfiguration *textConfig) {
    NSDictionary* errorDialogText = [configuration objectForKey:@"errorDialogText"];
    
    if (!errorDialogText){
        return;
    }
    
    NSString* button = [errorDialogText objectForKey:@"button"];
    if(button) {
        textConfig.errorAlertButtonText = button;
    }
    
    NSString* title = [errorDialogText objectForKey:@"title"];
    if(title) {
        textConfig.errorAlertTitle = title;
    }
    
    NSString* message = [errorDialogText objectForKey:@"message"];
    if(message) {
        textConfig.errorAlertMessage = message;
    }
}

void mapMedicalCertificateGuidanceTexts(NSDictionary *configuration, SBSDKUIMedicalCertificateScannerTextConfiguration *textConfig) {
    NSDictionary* guidanceText = [configuration objectForKey:@"guidanceText"];
    
    if (!guidanceText) {
        return;
    }
    
    NSString* capturing = [guidanceText objectForKey:@"capturing"];
    if(capturing) {
        textConfig.userGuidanceTitleCapturing = capturing;
    }
    
    NSString* recognizing = [guidanceText objectForKey:@"recognizing"];
    if(recognizing) {
        textConfig.userGuidanceTitleRecognizing = recognizing;
    }
    
    NSString* searching = [guidanceText objectForKey:@"searching"];
    if(searching) {
        textConfig.userGuidanceTitleSearching = searching;
    }
    
    NSString* scanning = [guidanceText objectForKey:@"scanningStarted"];
    if(scanning) {
        textConfig.userGuidanceTitleStartScanning= scanning;
    }
    
    NSString* paused = [guidanceText objectForKey:@"paused"];
    if(paused) {
        textConfig.userGuidanceTitlePaused = paused;
    }
    
    NSString* energySaving = [guidanceText objectForKey:@"energySaving"];
    if(energySaving) {
        textConfig.userGuidanceTitleEnergySaving = energySaving;
    }
}
