import {
  ApplyImageFilterOnPageResult,
  CreatePageResult,
  DetectDocumentOnPageResult,
  ImageFilterType,
  InitializationOptions,
  OCROutputFormat,
  Page,
  PDFPageSize,
  RecognizeCheckResult,
  RotatePageResult,
  SetDocumentImageResult,
  Status,
  TIFFCompression,
} from './types';
import {
  BarcodeScannerConfiguration,
  BatchBarcodeScannerConfiguration,
  CheckRecognizerConfiguration,
  CroppingConfiguration,
  DocumentScannerConfiguration,
  FinderDocumentScannerConfiguration,
  GenericDocumentRecognizerConfiguration,
  HealthInsuranceCardScannerConfiguration,
  LicensePlateScannerConfiguration,
  MedicalCertificateRecognizerConfiguration,
  MrzScannerConfiguration,
  TextDataScannerConfiguration,
} from './configurations';
import {
  ApplyImageFilterResult,
  BarcodeResult,
  CheckRecognizerResult,
  CreatePDFResult,
  CroppingResult,
  DetectBarcodesOnImageResult,
  DetectBarcodesOnImagesResult,
  DetectDocumentResult,
  DocumentScannerResult,
  EstimateBlurResult,
  GenericDocumentRecognizerResult,
  GetFilteredDocumentPreviewUriResult,
  GetImageDataResult,
  GetLicenseInfoResult,
  GetOCRConfigsResult,
  HealthInsuranceCardScannerResult,
  InitializeSDKResult,
  LicensePlateScannerResult,
  MedicalCertificateScannerResult as MedicalCertificateRecognizerResult,
  MrzResult,
  PerformOCRResult,
  RecognizeMRZResult,
  RefreshImageUrisResult,
  RemovePageResult,
  RotateImageResult,
  TextDataScannerResult,
  WriteTIFFResult,
} from './results';
import {
  DetectBarcodesOnImageArguments,
  DetectBarcodesOnImagesArguments,
  ExtractImagesFromPdfArguments,
  ExtractImagesFromPdfResult,
  ExtractPagesFromPdfArguments,
  ExtractPagesFromPdfResult,
} from './arguments';

type BaseSdkResult = {status: Status};

export interface ScanbotSDKUI {
  // Document Scanner RTU-UI
  startDocumentScanner(
    configuration: DocumentScannerConfiguration,
  ): Promise<DocumentScannerResult>;

  closeDocumentScanner(): Promise<void>;

  // Cropping Screen RTU-UI
  startCroppingScreen(
    page: Page,
    configuration: CroppingConfiguration,
  ): Promise<CroppingResult>;

  closeCroppingScreen(): Promise<void>;

  // Machine Readable Zone (MRZ) Scanner RTU-UI
  startMrzScanner(configuration: MrzScannerConfiguration): Promise<MrzResult>;

  closeMrzScanner(): Promise<void>;

  // Barcode Scanner RTU-UI
  startBarcodeScanner(
    configuration: BarcodeScannerConfiguration,
  ): Promise<BarcodeResult>;

  closeBarcodeScanner(): Promise<void>;

  // Batch Barcode Scanner RTU-UI
  startBatchBarcodeScanner(
    configuration: BatchBarcodeScannerConfiguration,
  ): Promise<BarcodeResult>;

  closeBatchBarcodeScanner(): Promise<void>;

  // Health Insurance Card (EHIC) Scanner RTU-UI
  startEHICScanner(
    configuration: HealthInsuranceCardScannerConfiguration,
  ): Promise<HealthInsuranceCardScannerResult>;

  closeEHICScanner(): Promise<void>;

  // Text Data Scanner RTU-UI
  startTextDataScanner(
    configuration: TextDataScannerConfiguration,
  ): Promise<TextDataScannerResult>;

  closeTextDataScanner(): Promise<void>;

  // License Plate Scanner RTU-UI
  startLicensePlateScanner(
    configuration: LicensePlateScannerConfiguration,
  ): Promise<LicensePlateScannerResult>;

  closeLicensePlateScanner(): Promise<void>;

  // Medical Certificate Recognizer RTU-UI
  startMedicalCertificateRecognizer(
    configuration: MedicalCertificateRecognizerConfiguration,
  ): Promise<MedicalCertificateRecognizerResult>;

  closeMedicalCertificateRecognizer(): Promise<void>;

  // Generic Document Recognizer RTU-UI
  startGenericDocumentRecognizer(
    configuration: GenericDocumentRecognizerConfiguration,
  ): Promise<GenericDocumentRecognizerResult>;

  closeGenericDocumentRecognizer(): Promise<void>;

  // Check Recognizer RTU-UI
  startCheckRecognizer(
    configuration: CheckRecognizerConfiguration,
  ): Promise<CheckRecognizerResult & BaseSdkResult>;

  closeCheckRecognizer(): Promise<void>;

  // Finder Document Scanner
  startFinderDocumentScanner(
    configuration: FinderDocumentScannerConfiguration,
  ): Promise<DocumentScannerResult>;

  closeFinderDocumentScanner(): Promise<void>;
}

export interface ScanbotSDKInternal {
  setNativeValidateProperty(result: string): void;

  setNativeProcessProperty(result: string): void;
}

export interface ScanbotSDK {
  UI: ScanbotSDKUI;
  Internal: ScanbotSDKInternal;

  initializeSDK(
    options: InitializationOptions,
  ): Promise<InitializeSDKResult & BaseSdkResult>;

  getLicenseInfo(): Promise<GetLicenseInfoResult & BaseSdkResult>;

  detectBarcodesOnImage(
    args: DetectBarcodesOnImageArguments,
  ): Promise<DetectBarcodesOnImageResult & BaseSdkResult>;

  detectBarcodesOnImages(
    args: DetectBarcodesOnImagesArguments,
  ): Promise<DetectBarcodesOnImagesResult & BaseSdkResult>;

  applyImageFilter(
    imageFileUri: string,
    filter: ImageFilterType,
  ): Promise<ApplyImageFilterResult & BaseSdkResult>;

  applyImageFilterOnPage(
    page: Page,
    filter: ImageFilterType,
  ): Promise<ApplyImageFilterOnPageResult & BaseSdkResult>;

  getImageData(
    imageFileUri: string,
  ): Promise<GetImageDataResult & BaseSdkResult>;

  rotateImage(
    imageFileUri: string,
    degrees: number,
  ): Promise<RotateImageResult & BaseSdkResult>;

  createPage(imageUri: string): Promise<CreatePageResult & BaseSdkResult>;

  removePage(page: Page): Promise<RemovePageResult & BaseSdkResult>;

  rotatePage(
    page: Page,
    times: number,
  ): Promise<RotatePageResult & BaseSdkResult>;

  setDocumentImage(
    page: Page,
    imageUri: string,
  ): Promise<SetDocumentImageResult & BaseSdkResult>;

  detectDocument(
    imageFileUri: string,
  ): Promise<DetectDocumentResult & BaseSdkResult>;

  detectDocumentOnPage(
    page: Page,
  ): Promise<DetectDocumentOnPageResult & BaseSdkResult>;

  estimateBlur(args: {
    imageFileUri: string;
  }): Promise<EstimateBlurResult & BaseSdkResult>;

  extractImagesFromPdf(
    args: ExtractImagesFromPdfArguments,
  ): Promise<ExtractImagesFromPdfResult & BaseSdkResult>;

  extractPagesFromPdf(
    args: ExtractPagesFromPdfArguments,
  ): Promise<ExtractPagesFromPdfResult & BaseSdkResult>;

  recognizeCheck(
    imageFileUri: string,
  ): Promise<RecognizeCheckResult & BaseSdkResult>;

  recognizeMrz(
    imageFileUri: string,
  ): Promise<RecognizeMRZResult & BaseSdkResult>;

  refreshImageUris(args: {
    pages: Page[];
  }): Promise<RefreshImageUrisResult & BaseSdkResult>;

  getOCRConfigs(): Promise<GetOCRConfigsResult & BaseSdkResult>;

  cleanup(): Promise<BaseSdkResult>;

  getFilteredDocumentPreviewUri(
    page: Page,
    filter: ImageFilterType,
  ): Promise<GetFilteredDocumentPreviewUriResult & BaseSdkResult>;

  performOCR(
    imageFileUris: string[],
    languages: string[],
    options: {
      outputFormat?: OCROutputFormat;
    },
  ): Promise<PerformOCRResult & BaseSdkResult>;

  createPDF(
    imageFileUris: string[],
    pageSize: PDFPageSize,
  ): Promise<CreatePDFResult & BaseSdkResult>;

  writeTIFF(
    imageFileUris: string[],
    options: {
      oneBitEncoded?: boolean;
      dpi?: number;
      compression?: TIFFCompression;
    },
  ): Promise<WriteTIFFResult & BaseSdkResult>;
}

declare var ScanbotSDK: ScanbotSDK;

export default ScanbotSDK;

export * from './configurations';
export * from './arguments';
export * from './types';
export * from './results';
export * from './components/barcode-camera-view/scanbot-barcode-camera-view';
export * from './components/barcode-camera-view/scanbot-barcode-camera-view-types';
