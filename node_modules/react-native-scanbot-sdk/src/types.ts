import {BarcodeResultField, CheckRecognizerResult} from './results';

export interface Point {
  x: number;
  y: number;
}

export interface Size {
  width: number;
  height: number;
}

export class MedicalCertificateStandardSize {
  /**
   * A5 portrait document (e.g. white sheet, AUB Muster 1b/E (1/2018))
   */
  static A5_PORTRAIT: Size = {width: 148.0, height: 210.0};
  /**
   * A6 landscape document (e.g. yellow sheet, AUB Muster 1b (1.2018))
   */
  static A6_LANDSCAPE: Size = {width: 148.0, height: 105.0};
}

export interface InitializationOptions {
  /**
   * The Scanbot SDK License Key
   */
  licenseKey: string;
  /**
   * If 'true' it enables logging.
   * Consider switching logging OFF in production builds for security and performance reasons!
   */
  loggingEnabled?: boolean;
  /**
   * The quality of stored images, from (1 to 100). Defaults to 80.
   */
  storageImageQuality?: number;
  /**
   * The preferred format for stored images.
   */
  storageImageFormat?: CameraImageFormat;
  /**
   * Optional custom storage path.
   */
  storageBaseDirectory?: string;
  /**
   * The engine used to detect documents.
   * The default and recommended value is ML_BASED.
   */
  documentDetectorMode?: DocumentDetectorMode;
  /**
   * Encryption custom password. Setting this property will enable encryption.
   */
  fileEncryptionPassword?: string;
  /**
   * Encryption mode. Setting this property will enable encryption.
   */
  fileEncryptionMode?: FileEncryptionMode;
  /**
   * If set to `true`, Camera X will be used for the RTU-UI components (Android Only)
   * Default is `false`.
   */
  useCameraX?: boolean;
  /**
   * If set to `false`, GPU Acceleration will be disabled for Barcode Scanner,
   * Document Scanner and Generic Document Recognizer (Android Only).
   * Default is `false`.
   */
  allowGpuAcceleration?: boolean;
  /**
   * Enables/disables XNNPACK acceleration for TensorFlow ML models, which provides
   * highly optimized implementations of floating-point neural network operators (Android Only)
   */
  allowXnnpackAcceleration?: boolean;

  /**
   * Enables Scanbot SDK Core native logging (default is false; Android Only)
   */
  enableNativeLogging?: boolean;
}

export interface LicenseInfo {
  isLicenseValid: boolean;
  licenseStatus: LicenseStatus;
  licenseExpirationDate?: number;
}

export interface FinderAspectRatio {
  width: number;
  height: number;
}

export type MedicalCertificateFormType =
  | '1A'
  | '1B'
  | '1C'
  | '1D'
  | '21A'
  | '1B_CUSTOM'
  | 'UNKNOWN';

export interface MedicalCertificateDateField {
  recognitionConfidence: number;
  dateString: string;
}

export interface MedicalCertificateCheckboxField {
  isChecked: boolean;
  confidence: number;
}

/**
 * Wraps a Javascript Function that is supposed to be
 * executed on the native layer.
 * Note: You MUST use JSTextFunctionBuilder to create this
 */
export type JSTextFunction<T> = {
  body: string;
  argsCount: number;
  _jsFunction?: T;
};

export class JSTextFunctionBuilder<CallbackType extends Function> {
  constructor(private callback: CallbackType) {}

  // Performs preprocessing on the function string representation.
  build(): JSTextFunction<CallbackType> {
    let fnStr = this.callback.toString();

    // Renames input arguments to standard sequential names (eg. __arg0__, __arg1__...)
    const params = this.getParamNames();
    params.forEach((param: string, index: number) => {
      const regex = new RegExp(`([^\\w])(${param})([^\\w])`, 'g');
      // eslint-disable-next-line no-useless-escape
      fnStr = fnStr.replace(regex, `\$1\_\_arg${index}\_\_\$3`);
    });

    // Gives a name to the function, so that it can be referenced from the native JSContext
    fnStr = fnStr.replace('function', 'function __execute__');

    return {
      body: fnStr,
      argsCount: params.length,
    };
  }

  // Returns the list of all the callback function arguments
  getParamNames(): string[] {
    const STRIP_COMMENTS =
      // eslint-disable-next-line no-useless-escape
      /(\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s*=[^,\)]*(('(?:\\'|[^'\r\n])*')|("(?:\\"|[^"\r\n])*"))|(\s*=[^,\)]*))/gm;
    const ARGUMENT_NAMES = /([^\s,]+)/g;

    let fnStr = this.callback.toString().replace(STRIP_COMMENTS, '');
    let result: any | null = fnStr
      .slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')'))
      .match(ARGUMENT_NAMES);
    if (result === null) {
      result = [];
    }

    return result;
  }
}

export type JSStringToBoolTextFunction = JSTextFunction<
  (value: string) => boolean
>;
export type JSStringToStringTextFunction = JSTextFunction<
  (value: string) => string
>;
export class JSStringToBoolTextFunctionBuilder extends JSTextFunctionBuilder<
  (value: string) => boolean
> {}
export class JSStringToStringTextFunctionBuilder extends JSTextFunctionBuilder<
  (value: string) => string
> {}

export type CameraImageFormat = 'JPG' | 'PNG';

export type OCROutputFormat =
  | 'PLAIN_TEXT'
  | 'RESULT_JSON'
  | 'PDF_FILE'
  | 'FULL_OCR_RESULT';

export type PDFPageSize =
  | 'FROM_IMAGE'
  | 'A4'
  | 'FIXED_A4'
  | 'US_LETTER'
  | 'FIXED_US_LETTER'
  | 'AUTO_LOCALE'
  | 'AUTO';

export type HealthInsuranceCardValidationType =
  | 'NONE'
  | 'AUTO_ANY'
  | 'AUTO_SUPPORTED'
  | 'GERMAN'
  | 'AUSTRIAN';

export type TIFFCompression =
  | 'NONE'
  | 'CCITTRLE'
  | 'CCITTFAX3'
  | 'CCITT_T4'
  | 'CCITTFAX4'
  | 'CCITT_T6'
  | 'CCITTRLEW'
  | 'LZW'
  | 'PACKBITS'
  | 'DEFLATE'
  | 'ADOBE_DEFLATE';

export type Status = 'OK' | 'CANCELED';

export class GenericDocumentNormalizedMRZFields {
  constructor(private rootField: string) {}

  /** Normalized field type name of the "BirthDate" document field. */
  public get BIRTH_DATE() {
    return `${this.rootField}.MRZ.BirthDate`;
  }

  /** Normalized field type name of the "CheckDigit" document field. */
  public get CHECK_DIGIT() {
    return `${this.rootField}.MRZ.CheckDigit`;
  }

  /** Normalized field type name of the "DocumentNumber" document field. */
  public get DOCUMENT_NUMBER() {
    return `${this.rootField}.MRZ.DocumentNumber`;
  }

  /** Normalized field type name of the "ExpiryDate" document field. */
  public get EXPIRY_DATE() {
    return `${this.rootField}.MRZ.ExpiryDate`;
  }

  /** Normalized field type name of the "Gender" document field. */
  public get GENDER() {
    return `${this.rootField}.MRZ.Gender`;
  }

  /** Normalized field type name of the "GivenNames" document field. */
  public get GIVEN_NAMES() {
    return `${this.rootField}.MRZ.GivenNames`;
  }

  /** Normalized field type name of the "IssuingAuthority" document field. */
  public get ISSUING_AUTHORITY() {
    return `${this.rootField}.MRZ.IssuingAuthority`;
  }

  /** Normalized field type name of the "Nationality" document field. */
  public get NATIONALITY() {
    return `${this.rootField}.MRZ.Nationality`;
  }

  /** Normalized field type name of the "Optional1" document field. */
  public get OPTIONAL_1() {
    return `${this.rootField}.MRZ.Optional1`;
  }

  /** Normalized field type name of the "Optional2" document field. */
  public get OPTIONAL_2() {
    return `${this.rootField}.MRZ.Optional2`;
  }

  /** Normalized field type name of the "Surname" document field. */
  public get SURNAME() {
    return `${this.rootField}.MRZ.Surname`;
  }

  /** Normalized field type name of the "TravelDocType" document field. */
  public get TRAVEL_DOC_TYPE() {
    return `${this.rootField}.MRZ.TravelDocType`;
  }

  /** Normalized field type name of the "TravelDocTypeVariant" document field. */
  public get TRAVEL_DOC_TYPE_VARIANT() {
    return `${this.rootField}.MRZ.TravelDocTypeVariant`;
  }
}

export const GenericDocumentNormalizedFields = {
  DeDriverLicenseBack: {
    /** Normalized field type name of the "Restrictions" document field. */
    RESTRICTIONS: 'DeDriverLicenseBack.Restrictions',
    Category: {
      /** Normalized field type name of the "Restrictions" document field. */
      RESTRICTIONS: 'DeDriverLicenseBack.Category.Restrictions',
      /** Normalized field type name of the "ValidFrom" document field. */
      VALID_FROM: 'DeDriverLicenseBack.Category.ValidFrom',
      /** Normalized field type name of the "ValidUntil" document field. */
      VALID_UNTIL: 'DeDriverLicenseBack.Category.ValidUntil',
    },
  },
  DeDriverLicenseFront: {
    /** Normalized field type name of the "BirthDate" document field. */
    BIRTH_DATE: 'DeDriverLicenseFront.BirthDate',
    /** Normalized field type name of the "Birthplace" document field. */
    BIRTHPLACE: 'DeDriverLicenseFront.Birthplace',
    /** Normalized field type name of the "ExpiryDate" document field. */
    EXPIRY_DATE: 'DeDriverLicenseFront.ExpiryDate',
    /** Normalized field type name of the "GivenNames" document field. */
    GIVEN_NAMES: 'DeDriverLicenseFront.GivenNames',
    /** Normalized field type name of the "ID" document field. */
    ID: 'DeDriverLicenseFront.ID',
    /** Normalized field type name of the "IssueDate" document field. */
    ISSUE_DATE: 'DeDriverLicenseFront.IssueDate',
    /** Normalized field type name of the "IssuingAuthority" document field. */
    ISSUING_AUTHORITY: 'DeDriverLicenseFront.IssuingAuthority',
    /** Normalized field type name of the "LicenseCategories" document field. */
    LICENSE_CATEGORIES: 'DeDriverLicenseFront.LicenseCategories',
    /** Normalized field type name of the "Photo" document field. */
    PHOTO: 'DeDriverLicenseFront.Photo',
    /** Normalized field type name of the "Signature" document field. */
    SIGNATURE: 'DeDriverLicenseFront.Signature',
    /** Normalized field type name of the "Surname" document field. */
    SURNAME: 'DeDriverLicenseFront.Surname',
  },
  DeIdCardBack: {
    /** Normalized field type name of the "Address" document field. */
    ADDRESS: 'DeIdCardBack.Address',
    /** Normalized field type name of the "EyeColor" document field. */
    EYE_COLOR: 'DeIdCardBack.EyeColor',
    /** Normalized field type name of the "Height" document field. */
    HEIGHT: 'DeIdCardBack.Height',
    /** Normalized field type name of the "IssueDate" document field. */
    ISSUE_DATE: 'DeIdCardBack.IssueDate',
    /** Normalized field type name of the "IssuingAuthority" document field. */
    ISSUING_AUTHORITY: 'DeIdCardBack.IssuingAuthority',
    /** Normalized field type name of the "Pseudonym" document field. */
    PSEUDONYM: 'DeIdCardBack.Pseudonym',
    /** Normalized field type name of the "RawMRZ" document field. */
    RAW_MRZ: 'DeIdCardBack.RawMRZ',
    /** MRZ Fields */
    MrzFields: new GenericDocumentNormalizedMRZFields('DeIdCardBack'),
  },
  DeIdCardFront: {
    /** Normalized field type name of the "BirthDate" document field. */
    BIRTH_DATE: 'DeIdCardFront.BirthDate',
    /** Normalized field type name of the "Birthplace" document field. */
    BIRTHPLACE: 'DeIdCardFront.Birthplace',
    /** Normalized field type name of the "ExpiryDate" document field. */
    EXPIRY_DATE: 'DeIdCardFront.ExpiryDate',
    /** Normalized field type name of the "GivenNames" document field. */
    GIVEN_NAMES: 'DeIdCardFront.GivenNames',
    /** Normalized field type name of the "ID" document field. */
    ID: 'DeIdCardFront.ID',
    /** Normalized field type name of the "MaidenName" document field. */
    MAIDEN_NAME: 'DeIdCardFront.MaidenName',
    /** Normalized field type name of the "Nationality" document field. */
    NATIONALITY: 'DeIdCardFront.Nationality',
    /** Normalized field type name of the "PIN" document field. */
    PIN: 'DeIdCardFront.PIN',
    /** Normalized field type name of the "Photo" document field. */
    PHOTO: 'DeIdCardFront.Photo',
    /** Normalized field type name of the "Signature" document field. */
    SIGNATURE: 'DeIdCardFront.Signature',
    /** Normalized field type name of the "Surname" document field. */
    SURNAME: 'DeIdCardFront.Surname',
  },
  DePassport: {
    /** Normalized field type name of the "BirthDate" document field. */
    BIRTH_DATE: 'DePassport.BirthDate',
    /** Normalized field type name of the "Birthplace" document field. */
    BIRTHPLACE: 'DePassport.Birthplace',
    /** Normalized field type name of the "CountryCode" document field. */
    COUNTRY_CODE: 'DePassport.CountryCode',
    /** Normalized field type name of the "ExpiryDate" document field. */
    EXPIRY_DATE: 'DePassport.ExpiryDate',
    /** Normalized field type name of the "Gender" document field. */
    GENDER: 'DePassport.Gender',
    /** Normalized field type name of the "GivenNames" document field. */
    GIVEN_NAMES: 'DePassport.GivenNames',
    /** Normalized field type name of the "ID" document field. */
    ID: 'DePassport.ID',
    /** Normalized field type name of the "IssueDate" document field. */
    ISSUE_DATE: 'DePassport.IssueDate',
    /** Normalized field type name of the "IssuingAuthority" document field. */
    ISSUING_AUTHORITY: 'DePassport.IssuingAuthority',
    /** Normalized field type name of the "MaidenName" document field. */
    MAIDEN_NAME: 'DePassport.MaidenName',
    /** Normalized field type name of the "Nationality" document field. */
    NATIONALITY: 'DePassport.Nationality',
    /** Normalized field type name of the "PassportType" document field. */
    PASSPORT_TYPE: 'DePassport.PassportType',
    /** Normalized field type name of the "Photo" document field. */
    PHOTO: 'DePassport.Photo',
    /** Normalized field type name of the "RawMRZ" document field. */
    RAW_MRZ: 'DePassport.RawMRZ',
    /** Normalized field type name of the "Signature" document field. */
    SIGNATURE: 'DePassport.Signature',
    /** Normalized field type name of the "Surname" document field. */
    SURNAME: 'DePassport.Surname',
    /** MRZ Fields */
    MrzFields: new GenericDocumentNormalizedMRZFields('DePassport'),
  },
};

/* --------------------------------------------------------------- */
/* --------------------------------------------------------------- */

/** Base Document Format */
export interface BaseDocumentFormat {
  /** True if the document was parsed successfully */
  parsedSuccessful: boolean;

  /** The parsed barcode document type */
  documentFormat: BarcodeDocumentFormat;
}

/** AAMVA Document Format */
export interface AAMVADocumentFormat extends BaseDocumentFormat {
  /** Header Raw String */
  headerRawString: string;

  /** File Type */
  fileType: string;

  /** Issuer Identification Number */
  issuerIdentificationNumber: string;

  /** AAMVA Version Number */
  aamvaVersionNumber: string;

  /** Jurisdiction Version Number */
  jurisdictionVersionNumber: string;

  /** Number of entries */
  numberOfEntries: number;

  /** Sub-files */
  subfiles: AAMVADocumentSubfile;
}

/** AAMVA Document Sub-File */
export interface AAMVADocumentSubfile {
  /** Sub-file type */
  subFileType: string;

  /** Sub-file raw header */
  subFileRawHeader: string;

  /** Sub-file fields */
  fields: AAMVADocumentSubfileField[];
}

/** AAMVA Document Sub-File Field */
export interface AAMVADocumentSubfileField {
  /** AAMVA Document sub-file Record Field Type */
  type: AAMVARecordFieldType;

  /** AAMVA Document sub-file Field Type String */
  typeString: string;

  /** AAMVA Document sub-file Field value */
  value: string;

  /** AAMVA Document sub-file Field raw value */
  rawValue: string;
}

/** AAMVA Record Field Type */
export type AAMVARecordFieldType =
  /** Audit information. */
  | 'AUDIT_INFORMATION'
  /** Card revision date. */
  | 'CARD_REVISION_DATE'
  /** Compliance type. */
  | 'COMPLIANCE_TYPE'
  /** Country of territory of issuance. */
  | 'COUNTRY_TERRITORY_OF_ISSUANCE'
  /** Court restriction code. */
  | 'COURT_RESTRICTION_CODE'
  /** Date of birth. */
  | 'DATE_OF_BIRTH'
  /** Document discriminator. */
  | 'DOCUMENT_DISCRIMINATOR'
  /** Eyes color. */
  | 'EYES_COLOR'
  /** Family name. */
  | 'FAMILY_NAME'
  /** Family name truncation. */
  | 'FAMILY_NAME_TRUNCATION'
  /** Federal commercial vehicle codes. */
  | 'FEDERAL_COMMERCIAL_VEHICLE_CODES'
  /** First name. */
  | 'FIRST_NAME'
  /** First name truncation. */
  | 'FIRST_NAMES_TRUNCATION'
  /** Full name. */
  | 'FULL_NAME'
  /** Hair color. */
  | 'HAIR_COLOR'
  /** HazMat endorsement expiry date. */
  | 'HAZ_MAT_ENDORSEMENT_EXPIRY_DATE'
  /** Height in CM. */
  | 'HEIGHT_IN_CM'
  /** Height in feet/inches. */
  | 'HEIGHT_IN_FEET_INCHES'
  /** Inventory control number. */
  | 'INVENTORY_CONTROL_NUMBER'
  /** Issue timestamp. */
  | 'ISSUE_TIMESTAMP'
  /** Jurisdiction-specific. */
  | 'JURISDICTION_SPECIFIC'
  /** Jurisdiction-specific restriction code description. */
  | 'JURISDICTION_SPECIFIC_RESTRICTION_CODE_DESCRIPTION'
  /** Jurisdiction-specific vehicle classification description. */
  | 'JURISDICTION_SPECIFIC_VEHICLE_CLASSIFICATION_DESCRIPTION'
  /** Last name. */
  | 'LAST_NAME'
  /** License classification code. */
  | 'LICENSE_CLASSIFICATION_CODE'
  /** License endorsements code. */
  | 'LICENSE_ENDORSEMENT_CODE'
  /** License expiration date. */
  | 'LICENSE_EXPIRATION_DATE'
  /** License or ID document issue date. */
  | 'LICENSE_OR_ID_DOCUMENT_ISSUE_DATE'
  /** License or ID number. */
  | 'LICENSE_OR_ID_NUMBER'
  /** License restriction code. */
  | 'LICENSE_RESTRICTION_CODE'
  /** Limited duration document indicator. */
  | 'LIMITED_DURATION_DOCUMENT_INDICATOR'
  /** Mailing city. */
  | 'MAILING_CITY'
  /** Mailing jurisdiction code. */
  | 'MAILING_JURISDICTION_CODE'
  /** Mailing postal code. */
  | 'MAILING_POSTAL_CODE'
  /** Mailing street address line 1. */
  | 'MAILING_STREET_ADDRESS_1'
  /** Mailing street address line 2. */
  | 'MAILING_STREET_ADDRESS_2'
  /** Medical indicator codes. */
  | 'MEDICAL_INDICATOR_CODES'
  /** MIddle name or initial. */
  | 'MIDDLE_NAME_OR_INITIAL'
  /** Middle names truncation. */
  | 'MIDDLE_NAMES_TRUNCATION'
  /** Name prefix. */
  | 'NAME_PREFIX'
  /** Name suffix. */
  | 'NAME_SUFFIX'
  /** Non-resident indicator. */
  | 'NON_RESIDENT_INDICATOR'
  /** Number of duplicates. */
  | 'NUMBER_OF_DUPLICATES'
  /** Organ donor. */
  | 'ORGAN_DONOR'
  /** Organ donor indicator. */
  | 'ORGAN_DONOR_INDICATOR'
  /** Permit classification code. */
  | 'PERMIT_CLASSIFICATION_CODE'
  /** Permit endorsement code. */
  | 'PERMIT_ENDORSEMENT_CODE'
  /** Permit expiration date. */
  | 'PERMIT_EXPIRATION_DATE'
  /** Permit identifier. */
  | 'PERMIT_IDENTIFIER'
  /** Permit issue date. */
  | 'PERMIT_ISSUE_DATE'
  /** Permit restriction code. */
  | 'PERMIT_RESTRICTION_CODE'
  /** Weight range. */
  | 'PHYSICAL_DESCRIPTION_WEIGHT_RANGE'
  /** Place of birth. */
  | 'PLACE_OF_BIRTH'
  /** Prefix. */
  | 'PREFIX'
  /** Race or ethnicity. */
  | 'RACE_ETHNICITY'
  /** Residence city. */
  | 'RESIDENCE_CITY'
  /** Residence jurisdiction code. */
  | 'RESIDENCE_JURISDICTION_CODE'
  /** Residence postal code. */
  | 'RESIDENCE_POSTAL_CODE'
  /** Residence street address line 1. */
  | 'RESIDENCE_STREET_ADDRESS_1'
  /** Residence street address line 2. */
  | 'RESIDENCE_STREET_ADDRESS_2'
  /** Sex. */
  | 'SEX'
  /** Social security number. */
  | 'SOCIAL_SECURITY_NUMBER'
  /** Standard endorsement code. */
  | 'STANDARD_ENDORSEMENT_CODE'
  /** Standard restriction code. */
  | 'STANDARD_RESTRICTION_CODE'
  /** Standard vehicle classification. */
  | 'STANDARD_VEHICLE_CLASSIFICATION'
  /** Suffix. */
  | 'SUFFIX'
  /** Under 18 until. */
  | 'UNDER_18_UNTIL'
  /** Under 19 until. */
  | 'UNDER_19_UNTIL'
  /** Under 21 until. */
  | 'UNDER_21_UNTIL'
  /** Unique customer identifier. */
  | 'UNIQUE_CUSTOMER_IDENTIFIER'
  /** Veteran indicator. */
  | 'VETERAN_INDICATOR'
  /** Virginia-specific class. */
  | 'VIRGINIA_SPECIFIC_CLASS'
  /** Virginia-specific endorsements. */
  | 'VIRGINIA_SPECIFIC_ENDORSEMENTS'
  /** Virginia-specific restrictions. */
  | 'VIRGINIA_SPECIFIC_RESTRICTIONS'
  /** Weight in KG. */
  | 'WEIGHT_IN_KG'
  /** Weight in LBS. */
  | 'WEIGHT_IN_LBS'
  /** Unknown. */
  | 'UNKNOWN';

/** Boarding Pass Document Format */
export interface BoardingPassDocumentFormat extends BaseDocumentFormat {
  /** Number of legs */
  numberOfLegs: number;

  /** True if electronic ticket, false otherwise */
  electronicTicket: boolean;

  /** Security Data */
  securityData: string;

  /** Legs */
  legs: BoardingPassLeg[];
}

/** Boarding Pass Leg */
export interface BoardingPassLeg {
  /** Boarding Pass Leg Fields */
  fields: BoardingPassLegField[];
}

/** Boarding Pass Leg Field */
export interface BoardingPassLegField {
  /** Boarding Pass Document Field Type */
  type: BoardingPassDocumentFieldType;

  /** Boarding Pass Document Field Value */
  value: string;
}

/** Boarding Pass Document Field Type */
export type BoardingPassDocumentFieldType =
  /** Airline designator of boarding pass issuer. */
  | 'AIRLINE_DESIGNATOR_OF_BOARDING_PASS_ISSUER'
  /** Airline numeric code. */
  | 'AIRLINE_NUMERIC_CODE'
  /** Baggage tag license plate numbers. */
  | 'BAGGAGE_TAG_LICENSE_PLATE_NUMBERS'
  /** Check-in sequence number. */
  | 'CHECK_IN_SEQUENCE_NUMBER'
  /** Compartment code. */
  | 'COMPARTMENT_CODE'
  /** Date of boarding pass issuance in Julian format. */
  | 'DATE_OF_BOARDING_PASS_ISSUANCE_JULIAN'
  /** Date of flight in Julian format. */
  | 'DATE_OF_FLIGHT_JULIAN'
  /** Departure airport code. */
  | 'DEPARTURE_AIRPORT_CODE'
  /** Destination airport code. */
  | 'DESTINATION_AIRPORT_CODE'
  /** Document form serial number. */
  | 'DOCUMENT_FORM_SERIAL_NUMBER'
  /** Document type. */
  | 'DOCUMENT_TYPE'
  /** Fast track. */
  | 'FAST_TRACK'
  /** First non-consecutive baggage tag license plate number. */
  | 'FIRST_NON_CONSECUTIVE_BAGGAGE_TAG_LICENSE_PLATE_NUMBER'
  /** Flight number. */
  | 'FLIGHT_NUMBER'
  /** For individual airline use. */
  | 'FOR_INDIVIDUAL_AIRLINE_USE'
  /** Free baggage allowance. */
  | 'FREE_BAGGAGE_ALLOWANCE'
  /** Frequent flyer airline designator. */
  | 'FREQUENT_FLYER_AIRLINE_DESIGNATOR'
  /** Frequent flyer number. */
  | 'FREQUENT_FLYER_NUMBER'
  /** IDAD indicator. */
  | 'IDAD_INDICATOR'
  /** International document verification. */
  | 'INTERNATIONAL_DOCUMENTATION_VERIFICATION'
  /** Marketing carrier designator. */
  | 'MARKETING_CARRIER_DESIGNATOR'
  /** Operating carrier designator. */
  | 'OPERATING_CARRIER_DESIGNATOR'
  /** Operating carrier PNR code. */
  | 'OPERATING_CARRIER_PNR_CODE'
  /** Passenger description. */
  | 'PASSENGER_DESCRIPTION'
  /** Passenger status. */
  | 'PASSENGER_STATUS'
  /** Seat number. */
  | 'SEAT_NUMBER'
  /** Second non-consecutive baggage tag license plate number. */
  | 'SECOND_NON_CONSECUTIVE_BAGGAGE_TAG_LICENSE_PLATE_NUMBER'
  /** Selectee indicator. */
  | 'SELECTEE_INDICATOR'
  /** Source of boarding pass issuance. */
  | 'SOURCE_OF_BOARDING_PASS_ISSUANCE'
  /** Source of check-in. */
  | 'SOURCE_OF_CHECK_IN'
  /** Version number. */
  | 'VERSION_NUMBER'
  /** Unknown */
  | 'UNKNOWN';

/** GS1 Document Format */
export interface GS1DocumentFormat extends BaseDocumentFormat {
  /** GS1 Document fields */
  fields: GS1DocumentField[];
}

/** GS1 Document Field */
export interface GS1DocumentField {
  /** Field raw value */
  rawValue: string;

  /** Application Identifier */
  applicationIdentifier: string;

  /** Data Title */
  dataTitle: string;

  /** Field description */
  fieldDescription: string;

  /** True if it is standard, false otherwise */
  standard: boolean;

  /** Validation Status */
  validationStatus: GS1SystemElementValidationStatus;
}

/** GS1 Element Validation Status */
export type GS1SystemElementValidationStatus =
  /** The GS1 Field is valid */
  | 'VALID'
  /** The GS1 Field is not valid */
  | 'INVALID';

/** ID Card PDF417 Document Format */
export interface IDCardPDF417DocumentFormat extends BaseDocumentFormat {
  /** ID Card PDF417 Document Fields */
  fields: IDCardPDF417DocumentField[];
}

/** ID Card PDF417 Document Field */
export interface IDCardPDF417DocumentField {
  /** Field Type */
  type: IDCardPDF417DocumentFieldType;

  /** Field Value */
  value: string;
}

/** ID Card PDF417 Document Field Type */
export type IDCardPDF417DocumentFieldType =
  /** First Name */
  | 'FIRST_NAME'
  /** Last Name */
  | 'LAST_NAME'
  /** Document Code */
  | 'DOCUMENT_CODE'
  /** Birth Date */
  | 'BIRTH_DATE'
  /** Date Issued */
  | 'DATE_ISSUED'
  /** Date Expired */
  | 'DATE_EXPIRED'
  /** Optional 1 */
  | 'OPTIONAL_1'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Certificate Document Format */
export interface MedicalCertificateDocumentFormat extends BaseDocumentFormat {
  /** Medical Certificate Document Fields */
  fields: MedicalCertificateDocumentField[];
}

/** Medical Certificate Document Field */
export interface MedicalCertificateDocumentField {
  /** Medical Certificate Document Field Type */
  type: MedicalCertificateDocumentFieldType;

  /** Medical Certificate Document Field Value */
  value: string;
}

/** Medical Certificate Document Field Type */
export type MedicalCertificateDocumentFieldType =
  /** Requires Care */
  | 'REQUIRES_CARE'
  /** Accident */
  | 'ACCIDENT'
  /** Initial Certificate */
  | 'INITIAL_CERTIFICATE'
  /** Renewed Certificate */
  | 'RENEWED_CERTIFICATE'
  /** Work Accident */
  | 'WORK_ACCIDENT'
  /** Assigned To Accident Insurance Doctor */
  | 'ASSIGNED_TO_ACCIDENT_INSURANCE_DOCTOR'
  /** Incapable Of Work Since */
  | 'INCAPABLE_OF_WORK_SINCE'
  /** Incapable Of Work Until */
  | 'INCAPABLE_OF_WORK_UNTIL'
  /** Diagnosed On */
  | 'DIAGNOSED_ON'
  /** Document Date */
  | 'DOCUMENT_DATE'
  /** Birth Date */
  | 'BIRTH_DATE'
  /** First Name */
  | 'FIRST_NAME'
  /** Last Name */
  | 'LAST_NAME'
  /** Diagnose */
  | 'DIAGNOSE'
  /** Health Insurance Number */
  | 'HEALTH_INSURANCE_NUMBER'
  /** Insured Person Number */
  | 'INSURED_PERSON_NUMBER'
  /** Status */
  | 'STATUS'
  /** Place Of Operation Number */
  | 'PLACE_OF_OPERATION_NUMBER'
  /** Doctor Number */
  | 'DOCTOR_NUMBER'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Plan Document Format */
export interface MedicalPlanDocumentFormat extends BaseDocumentFormat {
  /** Identifier */
  GUID: string;

  /** Current page (index) */
  currentPage: number;

  /** Total number of pages */
  totalNumberOfPages: number;

  /** Document version number */
  documentVersionNumber: string;

  /** Patch version number */
  patchVersionNumber: string;

  /** Language country code */
  languageCountryCode: string;

  /** Patient Information */
  patient: MedicalPlanPatientInformation;

  /** Doctor Information */
  doctor: MedicalPlanDoctorInformation;

  /** Subheadings */
  subheadings: MedicalPlanStandardSubheading[];
}

/** Medical Plan Patient Information */
export interface MedicalPlanPatientInformation {
  /** Medical Plan Patient Fields */
  fields: MedicalPlanPatientField[];
}

/** Medical Plan Patient Field */
export interface MedicalPlanPatientField {
  /** Medical Plan Patient Field Type */
  type: MedicalPlanPatientFieldType;

  /** Medical Plan Patient Field Value */
  value: string;
}

/** Medical Plan Patient Field Type */
export type MedicalPlanPatientFieldType =
  /** First Name */
  | 'FIRST_NAME'
  /** Last Name */
  | 'LAST_NAME'
  /** Title */
  | 'TITLE'
  /** Pre Name */
  | 'PRE_NAME'
  /** Suffix */
  | 'SUFFIX'
  /** Patient Id */
  | 'PATIENT_ID'
  /** Birth Date */
  | 'BIRTH_DATE'
  /** Gender */
  | 'GENDER'
  /** Weight */
  | 'WEIGHT'
  /** Height */
  | 'HEIGHT'
  /** Creatinine Value */
  | 'CREATININE_VALUE'
  /** Allergies And Intolerances */
  | 'ALLERGIES_AND_INTOLERANCES'
  /** Breast Feeding */
  | 'BREAST_FEEDING'
  /** Pregnant */
  | 'PREGNANT'
  /** Patient Free Text */
  | 'PATIENT_FREE_TEXT'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Plan Doctor Information */
export interface MedicalPlanDoctorInformation {
  /** Medical Plan Doctor Information Fields */
  fields: MedicalPlanDoctorField[];
}

/** Medical Plan Doctor Field */
export interface MedicalPlanDoctorField {
  /** Medical Plan Doctor Field Type */
  type: MedicalPlanDoctorFieldType;

  /** Medical Plan Doctor Field Value */
  value: string;
}

/** Medical Plan Doctor Field Type */
export type MedicalPlanDoctorFieldType =
  /** Issuer name */
  | 'ISSUER_NAME'
  /** Doctor number */
  | 'DOCTOR_NUMBER'
  /** Pharmacy ID */
  | 'PHARMACY_ID'
  /** Hospital ID */
  | 'HOSPITAL_ID'
  /** Street */
  | 'STREET'
  /** Postal Code */
  | 'POSTAL_CODE'
  /** Place */
  | 'PLACE'
  /** Telephone Number */
  | 'TELEPHONE_NUMBER'
  /** Email */
  | 'EMAIL'
  /** Issuing date and time */
  | 'ISSUING_DATE_AND_TIME'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Plan Standard Subheading */
export interface MedicalPlanStandardSubheading {
  /** Subheading Fields */
  fields: MedicalPlanStandardSubheadingField[];

  /** General Notes */
  generalNotes: string[];

  /** Medicines */
  medicines: MedicalPlanMedicine[];

  /** Prescriptions */
  prescriptions: MedicalPlanPrescription[];
}

/** Medical Plan Standard Subheading Field */
export interface MedicalPlanStandardSubheadingField {
  /** Medical Plan Standard Subheading Field Type */
  type: MedicalPlanStandardSubheadingFieldType;

  /** Medical Plan Standard Subheading Field Value */
  value: string;
}

/** Medical Plan Standard Subheading Field Type */
export type MedicalPlanStandardSubheadingFieldType =
  /** Key words */
  | 'KEY_WORDS'
  /** Subheading free text */
  | 'SUBHEADING_FREE_TEXT';

/** Medical Plan Medicine */
export interface MedicalPlanMedicine {
  /** Medical Plan Medicine Fields */
  fields: MedicalPlanMedicineField[];

  /** Medical Plan Medicine Substances */
  substances: MedicalPlanMedicineSubstance[];
}

/** Medical Plan Medicine Field */
export interface MedicalPlanMedicineField {
  /** Medical Plan Medicine Field Type */
  type: MedicalPlanMedicineFieldType;

  /** Medical Plan Medicine Field Value */
  value: string;
}

/** Medical Plan Medicine Field Type */
export type MedicalPlanMedicineFieldType =
  /** Pharmaceutical number */
  | 'PHARMACEUTICAL_NUMBER'
  /** Drug name */
  | 'DRUG_NAME'
  /** Dosage form */
  | 'DOSAGE_FORM'
  /** Dosage form free text */
  | 'DOSAGE_FORM_FREE_TEXT'
  /** Morning */
  | 'MORNING'
  /** Midday */
  | 'MIDDAY'
  /** Evening */
  | 'EVENING'
  /** Night */
  | 'NIGHT'
  /** Dosage free text */
  | 'DOSAGE_FREE_TEXT'
  /** Dosing unit */
  | 'DOSING_UNIT'
  /** Dosing unit free text */
  | 'DOSING_UNIT_FREE_TEXT'
  /** Relevant info */
  | 'RELEVANT_INFO'
  /** Reason for treatment */
  | 'REASON_FOR_TREATMENT'
  /** General notes */
  | 'GENERAL_NOTES'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Plan Medicine Substance */
export interface MedicalPlanMedicineSubstance {
  /** Medical Plan Medicine Substance Fields */
  fields: MedicalPlanMedicineSubstanceField[];
}

/** Medical Plan Medicine Substance Field */
export interface MedicalPlanMedicineSubstanceField {
  /** Medical Plan Medicine Substance Field Type */
  type: MedicalPlanMedicineSubstanceFieldType;

  /** Medical Plan Medicine Substance Field Value */
  value: string;
}

/** Medical Plan Medicine Substance Field Type */
export type MedicalPlanMedicineSubstanceFieldType =
  /** Active substance */
  | 'ACTIVE_SUBSTANCE'
  /** Potency */
  | 'POTENCY'
  /** Unknown */
  | 'UNKNOWN';

/** Medical Plan Prescription */
export interface MedicalPlanPrescription {
  /** Medical Plan Prescription Fields */
  fields: MedicalPlanPrescriptionField[];
}

/** Medical Plan Prescription Field */
export interface MedicalPlanPrescriptionField {
  /** Medical Plan Prescription Field Type */
  type: MedicalPlanPrescriptionFieldType;

  /** Medical Plan Prescription Field Value */
  value: string;
}

/** Medical Plan Prescription Field Type */
export type MedicalPlanPrescriptionFieldType =
  /** General informationm */
  | 'GENERAL_INFORMATION'
  /** Prescription free text */
  | 'PRESCRIPTION_FREE_TEXT'
  /** Unknown */
  | 'UNKNOWN';

/** SEPA Document Format */
export interface SEPADocumentFormat extends BaseDocumentFormat {
  /** SEPA Document Format Fields */
  fields: SEPADocumentFormatField[];
}

/** SEPA Document Format Field */
export interface SEPADocumentFormatField {
  /** SEPA Document Field Type */
  type: SEPADocumentFieldType;

  /** SEPA Document Field Value */
  value: string;
}

/** SEPA Document Field Type */
export type SEPADocumentFieldType =
  /** Service tag */
  | 'SERVICE_TAG'
  /** Version */
  | 'VERSION'
  /** Character set */
  | 'CHARACTER_SET'
  /** Identification */
  | 'IDENTIFICATION'
  /** Receiver IBAN */
  | 'RECEIVER_IBAN'
  /** Receiver BIC */
  | 'RECEIVER_BIC'
  /** Receiver name */
  | 'RECEIVER_NAME'
  /** Receiver amount */
  | 'AMOUNT'
  /** Purpose */
  | 'PURPOSE'
  /** Remittance */
  | 'REMITTANCE'
  /** Information */
  | 'INFORMATION'
  /** Unknown */
  | 'UNKNOWN';

/** Swiss QR Code Document Format */
export interface SwissQRCodeDocumentFormat extends BaseDocumentFormat {
  /** Swiss QR Code Document Fields */
  fields: SwissQRCodeDocumentField[];

  /** Swiss QR Code Version */
  version: SwissQRCodeVersion;
}

/** Swiss QR Code Document Field */
export interface SwissQRCodeDocumentField {
  /** Swiss QR Code Document Field Type */
  type: SwissQRCodeDocumentFieldType;

  /** Swiss QR Code Document Field Value */
  value: string;

  /** Swiss QR Code Document Field Human-readable String */
  typeHumanReadableString: string;
}

/** Swiss QR Code Document Field Type */
export type SwissQRCodeDocumentFieldType =
  /** Additional Billing Information */
  | 'ADDITIONAL_BILLING_INFORMATION'
  /** Additional Info Trailer */
  | 'ADDITIONAL_INFO_TRAILER'
  /** Additional Info Unstructured */
  | 'ADDITIONAL_INFO_UNSTRUCTURED'
  /** Alternative Procedure Parameter */
  | 'ALTERNATIVE_PROCEDURE_PARAMETER'
  /** Amount */
  | 'AMOUNT'
  /** Currency */
  | 'CURRENCY'
  /** Debtor Address Type */
  | 'DEBTOR_ADDRESS_TYPE'
  /** Debtor Country */
  | 'DEBTOR_COUNTRY'
  /** Debtor Name */
  | 'DEBTOR_NAME'
  /** Debtor Place */
  | 'DEBTOR_PLACE'
  /** Debtor Postal Code */
  | 'DEBTOR_POSTAL_CODE'
  /** Debtor Street Or Address Line 1 */
  | 'DEBTOR_STREET_OR_ADDRESS_LINE_1'
  /** Debtor Street Or Address Line 2 */
  | 'DEBTOR_STREET_OR_ADDRESS_LINE_2'
  /** Due Date */
  | 'DUE_DATE'
  /** Encoding */
  | 'ENCODING'
  /** Final Payee Address Type */
  | 'FINAL_PAYEE_ADDRESS_TYPE'
  /** Final Payee Building Or Address Line 2 */
  | 'FINAL_PAYEE_BUILDING_OR_ADDRESS_LINE_2'
  /** Final Payee Country */
  | 'FINAL_PAYEE_COUNTRY'
  /** Final Payee Name */
  | 'FINAL_PAYEE_NAME'
  /** Final Payee Place */
  | 'FINAL_PAYEE_PLACE'
  /** Final Payee Postal Code */
  | 'FINAL_PAYEE_POSTAL_CODE'
  /** Final Payee Street Or Address Line 1 */
  | 'FINAL_PAYEE_STREET_OR_ADDRESS_LINE_1'
  /** Iban */
  | 'IBAN'
  /** Payee Address Type */
  | 'PAYEE_ADDRESS_TYPE'
  /** Payee Building Or Address Line 2 */
  | 'PAYEE_BUILDING_OR_ADDRESS_LINE_2'
  /** Payee Country */
  | 'PAYEE_COUNTRY'
  /** Payee Name */
  | 'PAYEE_NAME'
  /** Payee Place */
  | 'PAYEE_PLACE'
  /** Payee Postal Code */
  | 'PAYEE_POSTAL_CODE'
  /** Payee Street Or Address Line 1 */
  | 'PAYEE_STREET_OR_ADDRESS_LINE_1'
  /** Payment Reference */
  | 'PAYMENT_REFERENCE'
  /** Payment Reference Type */
  | 'PAYMENT_REFERENCE_TYPE'
  /** Unknown */
  | 'UNKNOWN';

/** Swiss QR Code Version */
export type SwissQRCodeVersion =
  /** Version 1.0 */
  | 'V1_0'
  /** Version 2.0 */
  | 'V2_0'
  /** Version 2.1 */
  | 'V2_1'
  /** Unknown */
  | 'UNKNOWN';

/** vCard Document Format */
export interface VCardDocumentFormat extends BaseDocumentFormat {
  /** vCard Document Format Fields */
  fields: VCardDocumentFormatField[];
}

/** vCard Document Field */
export interface VCardDocumentFormatField {
  /** vCard Document Field Type */
  type: VCardDocumentFormatFieldType;

  /** vCard Document Field Type Modifiers */
  typeModifiers: string[];

  /** vCard Document Field Raw Text */
  rawText: string;

  /** vCard Document Field Values */
  values: string[];
}

/** vCard Document Field Type */
export type VCardDocumentFormatFieldType =
  /** Anniversary */
  | 'ANNIVERSARY'
  /** Birthday */
  | 'BIRTHDAY'
  /** Busy Time Url */
  | 'BUSY_TIME_URL'
  /** Calendar Uri */
  | 'CALENDAR_URI'
  /** Calendar Uri For Requests */
  | 'CALENDAR_URI_FOR_REQUESTS'
  /** Categories */
  | 'CATEGORIES'
  /** Client Pid Map */
  | 'CLIENT_PID_MAP'
  /** Custom */
  | 'CUSTOM'
  /** Delivery Address */
  | 'DELIVERY_ADDRESS'
  /** Email */
  | 'EMAIL'
  /** First Name */
  | 'FIRST_NAME'
  /** Gender */
  | 'GENDER'
  /** Geo Location */
  | 'GEO_LOCATION'
  /** Impp */
  | 'IMPP'
  /** Kind */
  | 'KIND'
  /** Languages */
  | 'LANGUAGES'
  /** Logo */
  | 'LOGO'
  /** Member */
  | 'MEMBER'
  /** Name */
  | 'NAME'
  /** Nickname */
  | 'NICKNAME'
  /** Note */
  | 'NOTE'
  /** Organisation */
  | 'ORGANISATION'
  /** Photo */
  | 'PHOTO'
  /** Product ID */
  | 'PRODUCT_ID'
  /** Public Key */
  | 'PUBLIC_KEY'
  /** Related */
  | 'RELATED'
  /** Revision */
  | 'REVISION'
  /** Role */
  | 'ROLE'
  /** Sound */
  | 'SOUND'
  /** Source */
  | 'SOURCE'
  /** Telephone Number */
  | 'TELEPHONE_NUMBER'
  /** Time Zone */
  | 'TIME_ZONE'
  /** Title */
  | 'TITLE'
  /** UID */
  | 'UID'
  /** URL */
  | 'URL'
  /** Version */
  | 'VERSION'
  /** Xml */
  | 'XML'
  /** Unknown */
  | 'UNKNOWN';

/** Configuration that helps to override default hint values. */
export interface CheckUserGuidanceStrings {
  /** Text that is shown on camera open. */
  startScanning: string;

  /** Text that is shown when the camera is seeking for the document on the visible area, shown after the first result from the detector. */
  scanning: string;

  /** Text that is shown when energy saving is active. (iOS only) */
  energySaving: string;

  /** Text that is shown when the camera snaps the image. (Android only) */
  capturing: string;

  /** Text that is shown when the detector tries to detect the document from the snapped image. (Android only) */
  processing: string;
}

/** Supported check standards. */
export type CheckStandard =
  /** A check compatible with the ASC X9 standard used in the USA */
  | 'USA'
  /** A check format commonly used in France */
  | 'FRA'
  /** A check format commonly used in Kuwait */
  | 'KWT'
  /** A check compatible with the Australian Paper Clearing System cheque standard */
  | 'AUS'
  /** A check compatible with the CTS-2010 standard issued by the Reserve Bank of India in 2012 */
  | 'IND';

/** Check Status */
export type CheckStatus =
  /** The check recognition was successful */
  | 'SUCCESS'
  /** The check recognition failed */
  | 'FAIL';

/** Check Result */
export interface CommonCheckResult {
  /** The font type */
  fontType?: CheckRecognizerResultField;

  /** The recognized raw string */
  rawString?: CheckRecognizerResultField;

  /** The country code for the recognized check */
  countryCode?: CheckRecognizerResultField;
}

/** USA Check Result */
export interface USACheckResult extends CommonCheckResult {
  /** The account number */
  accountNumber?: CheckRecognizerResultField;

  /** Auxiliary on US */
  auxiliaryOnUs?: CheckRecognizerResultField;

  /** Transit Number */
  transitNumber?: CheckRecognizerResultField;
}

/** FRA Check Result */
export interface FRACheckResult extends CommonCheckResult {
  /** The account number */
  accountNumber?: CheckRecognizerResultField;

  /** The cheque number */
  chequeNumber?: CheckRecognizerResultField;

  /** The routing number */
  routingNumber?: CheckRecognizerResultField;
}

/** KWT Check Result */
export interface KWTCheckResult extends CommonCheckResult {
  /** The account number */
  accountNumber?: CheckRecognizerResultField;

  /** The cheque number */
  chequeNumber?: CheckRecognizerResultField;

  /** The sort code */
  sortCode?: CheckRecognizerResultField;
}

/** AUS Check Result */
export interface AUSCheckResult extends CommonCheckResult {
  /** The account number */
  accountNumber?: CheckRecognizerResultField;

  /** AUX domestic */
  auxDomestic?: CheckRecognizerResultField;

  /** BSB */
  bsb?: CheckRecognizerResultField;

  /** Extra AUX domestic */
  extraAuxDomestic?: CheckRecognizerResultField;

  /** Transaction code */
  transactionCode?: CheckRecognizerResultField;
}

/** IND Check Result */
export interface INDCheckResult extends CommonCheckResult {
  /** The account number */
  accountNumber?: CheckRecognizerResultField;

  /** The serial number */
  serialNumber?: CheckRecognizerResultField;

  /** The sort number */
  sortNumber?: CheckRecognizerResultField;

  /** Transaction code */
  transactionCode?: CheckRecognizerResultField;
}

/** Unknown Check Result */
export interface UnknownCheckResult extends CommonCheckResult {}

/** Check Recognizer Result recognized field value */
export interface CheckRecognizerResultFieldValue {
  /** The field recognized text */
  text?: string;
}

/** Check Recognizer Result recognized field */
export interface CheckRecognizerResultField {
  /** The validation status (1 if successful, 0 otherwise) */
  validationStatus?: number;

  /** The field value */
  value?: CheckRecognizerResultFieldValue;
}

/** SDK Page */
export interface Page {
  /** A string identifying the page in the internal page file storage */
  pageId: string;

  /** The page's cropping polygon as calculated by a document detection operation or as set by the cropping UI. Modifying the polygon will change the polygon as shown in the cropping UI but will not automatically re-crop the original image */
  polygon: PolygonPoint[];

  /** The document detection result status for the operation that produced the page */
  detectionResult: DetectionStatus;

  /** The image source */
  pageImageSource: PageImageSource;

  /** The Image Filter that was applied on the page image */
  filter: ImageFilterType;

  /** The value that was set for `documentImageSizeLimit`, which limits the maximum size of the document image. */
  documentImageSizeLimit?: Size;

  /** File URI of the original image */
  originalImageFileUri: string;

  /** File URI of the cropped document image (if document detection was successful) */
  documentImageFileUri?: string;

  /** File URI of a screen-sized preview of the original image */
  originalPreviewImageFileUri: string;

  /** File URI of a screen-sized preview of the document image (if document detection was successful) */
  documentPreviewImageFileUri?: string;
}

/** The page image source */
export type PageImageSource =
  /** “If the page image source cannot be determined” */
  | 'UNKNOWN'
  /** If the source image was captured manually. For example, when the user pressed a Snap button */
  | 'MANUAL_SNAP'
  /** If the source image was captured automatically. For example, by auto snapping functions */
  | 'AUTO_SNAP'
  /** If the source image was taken from the camera frame */
  | 'CAMERA_FRAME'
  /** Used by default. If the source is not defined. */
  | 'UNDEFINED'
  /** If the source image was imported from an external source */
  | 'IMPORT';

/** The SDK license status */
export type LicenseStatus =
  /** License is valid and accepted. */
  | 'Okay'
  /** No license set yet. The SDK is in trial mode. */
  | 'Trial'
  /** No license set yet. The SDKs trial mode is over. */
  | 'Expired'
  /** No license active. The set license does not cover the current operating system. */
  | 'WrongOS'
  /** No license active. The set license was unreadable or has an invalid format. */
  | 'Corrupted'
  /** No license active. The set licenses does not cover the current apps bundle identifier. */
  | 'AppIDMismatch'
  /** No license set yet. The SDKs trial mode is over. */
  | 'NotSet';

/** Polygon Point */
export interface PolygonPoint {
  /** Polygon point X */
  x: number;

  /** Polygon point Y */
  y: number;
}

/** Detection Status */
export type DetectionStatus =
  /** An acceptable polygon was detected. */
  | 'OK'
  /** A polygon was detected, but its size is too small. */
  | 'OK_BUT_TOO_SMALL'
  /** A polygon was detected, but it has too much perspective distortion. */
  | 'OK_BUT_BAD_ANGLES'
  /** A polygon was detected, but its aspect ratio should be landscape/portrait but is portrait/landscape. */
  | 'OK_BUT_BAD_ASPECT_RATIO'
  /** No polygon detected at all. */
  | 'ERROR_NOTHING_DETECTED'
  /** No polygon detected, image too dark. */
  | 'ERROR_TOO_DARK'
  /** No polygon detected, image too noisy (background). */
  | 'ERROR_TOO_NOISY';

/** Barcode document format */
export type BarcodeDocumentFormat =
  /** American Association of Motor Vehicle Administrators barcode document */
  | 'AAMVA'
  /** Boarding pass barcode document */
  | 'BOARDING_PASS'
  /** German medical plan barcode document */
  | 'DE_MEDICAL_PLAN'
  /** German medical certificate barcode document */
  | 'MEDICAL_CERTIFICATE'
  /** ID Card barcode document */
  | 'ID_CARD_PDF_417'
  /** SEPA barcode document */
  | 'SEPA'
  /** Swiss QR barcode document */
  | 'SWISS_QR'
  /** VCard barcode document */
  | 'VCARD'
  /** GS1 barcode document */
  | 'GS1';

/** Barcode format */
export type BarcodeFormat =
  /** Aztec barcode type */
  | 'AZTEC'
  /** CODABAR barcode type */
  | 'CODABAR'
  /** CODE_25 barcode type */
  | 'CODE_25'
  /** CODE_39 barcode type */
  | 'CODE_39'
  /** CODE_93 barcode type */
  | 'CODE_93'
  /** CODE_128 barcode type */
  | 'CODE_128'
  /** DATA_MATRIX barcode type */
  | 'DATA_MATRIX'
  /** EAN_8 barcode type */
  | 'EAN_8'
  /** EAN_13 barcode type */
  | 'EAN_13'
  /** ITF barcode type */
  | 'ITF'
  /** PDF_417 barcode type */
  | 'PDF_417'
  /** QR_CODE barcode type */
  | 'QR_CODE'
  /** RSS_14 barcode type */
  | 'RSS_14'
  /** RSS_EXPANDED barcode type */
  | 'RSS_EXPANDED'
  /** UPC_A barcode type */
  | 'UPC_A'
  /** UPC_E barcode type */
  | 'UPC_E'
  /** Unknown barcode type */
  | 'UNKNOWN'
  /** MSI Plessey barcode type */
  | 'MSI_PLESSEY'
  /** IATA (2 of 5) barcode type */
  | 'IATA_2_OF_5'
  /** INDUSTRIAL (2 of 5) barcode type */
  | 'INDUSTRIAL_2_OF_5';

/** Camera module to use */
export type CameraModule =
  /** Front camera */
  | 'FRONT'
  /** Back camera */
  | 'BACK';

/** MSI plessey checksum algorithm */
export type MSIPlesseyChecksumAlgorithm =
  /** Not use checksum */
  | 'None'
  /** Mod10 checksum algorithm */
  | 'Mod10'
  /** Mod11IBM checksum algorithm */
  | 'Mod11IBM'
  /** Mod11NCR checksum algorithm */
  | 'Mod11NCR'
  /** Mod1010 checksum algorithm */
  | 'Mod1010'
  /** Mod1110IBM checksum algorithm */
  | 'Mod1110IBM'
  /** Mod1110NCR checksum algorithm */
  | 'Mod1110NCR';

/** Barcode scanner engine mode */
export type EngineMode =
  /** Recommended barcode scanning mode. Used by default */
  | 'NEXT_GEN'
  /** Legacy barcode scanning mode. */
  | 'LEGACY';

/** Applied interface orientation */
export type OrientationLockMode =
  /** Do not restrict interface orientation */
  | 'NONE'
  /** Portrait screen orientations only */
  | 'PORTRAIT'
  /** Landscape screen orientations only */
  | 'LANDSCAPE';

/** Finder aspect ratio */
export interface FinderAspectRatio {
  /** The width component of the aspect ratio. */
  width: number;

  /** The height component of the aspect ratio. */
  height: number;
}

/** Standard size object */
export interface Size {
  /** Width parameter */
  width: number;

  /** Height parameter */
  height: number;
}

/** The expected density of QR codes in an image. */
export type CodeDensity =
  /** Up to 6 QR codes per image. */
  | 'LOW'
  /** Up to 24 QR codes per image. */
  | 'HIGH';

/** Represents camera preview modes */
export type CameraPreviewMode =
  /** In this mode camera preview frames will be downscaled to the layout view size - full preview frame content will be visible, but unused edges could be appeared in the preview layout. */
  | 'FIT_IN'
  /** In this mode camera preview frames fill the layout view - the preview frames may contain additional content on the edges that was not visible in the preview layout. */
  | 'FILL_IN';

/** Defines the possible barcode image sources. */
export type BarcodeImageGenerationType =
  /** No barcode image generation. */
  | 'NONE'
  /** Generating barcode image from the last video frame. Faster, but has lower resolution. */
  | 'VIDEO_FRAME'
  /** Generating barcode image from separately captured frame. Higher resolution, but might have a slight delay. */
  | 'CAPTURED_IMAGE';

/** Barcode scanner engine mode */
export type BarcodeOverlayTextFormat =
  /** Show only barcode overlay frame. */
  | 'NONE'
  /** Show barcode value with extention. */
  | 'CODE'
  /** Show barcode value with barcode format. */
  | 'CODE_AND_TYPE';

/** Barcode Selection Overlay configuration */
export interface SelectionOverlayConfiguration {
  /** Whether the barcode selection overlay is enabled or not. */
  overlayEnabled: boolean;

  /** Whether the barcode is selected automatically when being detected or not. */
  automaticSelectionEnabled: boolean;

  /** Define the way of how to show barcode data with selection overlay. */
  textFormat: BarcodeOverlayTextFormat;

  /** The color of the polygon in the selection overlay. */
  polygonColor: string;

  /** The color of the text in the selection overlay. */
  textColor: string;

  /** The color of the texts background in the selection overlay. */
  textContainerColor: string;

  /** The color of the polygon in the selection overlay, when highlighted. */
  highlightedPolygonColor: string;

  /** The color of the text in the selection overlay, when highlighted. */
  highlightedTextColor: string;

  /** The color of the texts background in the selection overlay, when highlighted. */
  highlightedTextContainerColor: string;
}

/** The font name and size. iOS only. */
export interface Font {
  /** The font name. defaults to SYSTEM. */
  fontName: string;

  /** The font size. defaults 17.0 . */
  fontSize: number;
}

/** The blur effect style. iOS only. */
export type BlurEffect =
  /** The area of the view is lighter than the underlying view. */
  | 'EXTRA_LIGHT'
  /** The area of the view is the same approximate lightness of the underlying view. */
  | 'LIGHT'
  /** The area of the view is darker than the underlying view. */
  | 'DARK'
  /** A regular blur style that adapts to the user interface style. */
  | 'REGULAR'
  /** A blur style for making content more prominent that adapts to the user interface style. */
  | 'PROMINENT'
  /** An adaptable blur effect that creates the appearance of an ultra-thin material. iOS13+. */
  | 'SYSTEM_ULTRA_THIN_MATERIAL'
  /** An adaptable blur effect that creates the appearance of a thin material. iOS13+. */
  | 'SYSTEM_THIN_MATERIAL'
  /** An adaptable blur effect that create the appearance of a material with normal thickness. Defaults on iOS13 and more. iOS13+. */
  | 'SYSTEM_MATERIAL'
  /** An adaptable blur effect that creates the appearance of a material that's thicker than normal. iOS13+. */
  | 'SYSTEM_THICK_MATERIAL'
  /** An adaptable blur effect that creates the appearance of the system chrome. iOS13+. */
  | 'SYSTEM_CHROME_MATERIAL'
  /** A blur effect that creates the appearance of an ultra-thin material and is always light. iOS13+. */
  | 'SYSTEM_ULTRA_THIN_MATERIAL_LIGHT'
  /** A blur effect that creates the appearance of a thin material and is always light. iOS13+. */
  | 'SYSTEM_THIN_MATERIAL_LIGHT'
  /** A blur effect that creates the appearance of a material with normal thickness and is always light. iOS13+. */
  | 'SYSTEM_MATERIAL_LIGHT'
  /** A blur effect that creates the appearance of a material that’s thicker than normal and is always light. iOS13+. */
  | 'SYSTEM_THICK_MATERIAL_LIGHT'
  /** A blur effect that creates the appearance of the system chrome and is always light. iOS13+ */
  | 'SYSTEM_CHROME_MATERIAL_LIGHT'
  /** A blur effect that creates the appearance of an ultra-thin material and is always dark. iOS13+ */
  | 'SYSTEM_ULTRA_THIN_MATERIAL_DARK'
  /** A blur effect that creates the appearance of a thin material and is always dark. iOS13+ */
  | 'SYSTEM_THIN_MATERIAL_DARK'
  /** A blur effect that creates the appearance of a material with normal thickness and is always dark. iOS13+. */
  | 'SYSTEM_MATERIAL_DARK'
  /** A blur effect that creates the appearance of a material that’s thicker than normal and is always dark. iOS13+. */
  | 'SYSTEM_THICK_MATERIAL_DARK'
  /** A blur effect that creates the appearance of the system chrome and is always dark. iOS13+ */
  | 'SYSTEM_CHROME_MATERIAL_DARK';

/** Defines a range for zooming */
export interface ZoomRange {
  /** The minimum zoom scale. Defaults to 1.0. */
  minZoom: number;

  /** The maximum zoom scale. Defaults to 3.0. */
  maxZoom: number;
}

/** Configuration for the dialog/alert style */
export interface DialogStyle {
  /** The Color of the screen-covering backdrop view. */
  screenBackgroundColor: string;

  /** The general background color of the actual dialog view. */
  dialogBackgroundColor: string;

  /** The visual effect of the dialogs background. */
  dialogBackgroundEffect: BlurEffect;

  /** The corner radius of the dialog. */
  cornerRadius: number;

  /** The color of the dialogs title. */
  titleColor: string;

  /** The font of the dialogs title */
  titleFont: Font;

  /** The color of the dialogs message. */
  messageColor: string;

  /** The font of the dialogs message. */
  messageFont: Font;

  /** The color of the separators around the dialogs button area. */
  separatorColor: string;

  /** The width of the separators in points. */
  separatorWidth: number;
}

/** Configuration for the dialogs/alerts OK button style. */
export interface DialogButtonStyle {
  /** The font of the button title. */
  font: Font;

  /** The color of the buttons title while not pressed. */
  textColor: string;

  /** The color of the buttons title while pressed. */
  highlightedTextColor: string;

  /** The background color of the button while not pressed. */
  backgroundColor: string;

  /** The background color of the button while pressed. */
  highlightedBackgroundColor: string;
}

/** Mode for document detection. */
export type DocumentDetectorMode =
  /** Is the recommended mode, based on Machine Learning. Requires iOS 11.2+. */
  | 'ML_BASED'
  /** Legacy mode, based on classic Computer Vision algorithms. */
  | 'EDGE_BASED';

/** The barcode text format dialog. */
export type BarcodeDialogFormat =
  /** Show the barcode value only. */
  | 'CODE'
  /** Show the barcode format with value. */
  | 'TYPE_AND_CODE';

/** The image filter types. */
export type ImageFilterType =
  /** Passthrough filter. Does not alter the image. */
  | 'ImageFilterTypeNone'
  /** Optimizes colors, contrast and brightness. Usecase: photos. */
  | 'ImageFilterTypeColor'
  /** Standard grayscale filter. Creates a grayscaled 8-bit image and optimizes contrast and dynamic range. */
  | 'ImageFilterTypeGray'
  /** Standard binarization filter with contrast optimization. Creates a grayscaled 8-bit image with mostly black or white pixels. Usecase: Preparation for optical character recognition. */
  | 'ImageFilterTypeBinarized'
  /** Fixes white-balance and cleans up the background. Usecase: images of paper documents. */
  | 'ImageFilterTypeColorDocument'
  /** A filter for binarizing an image. Creates an 8-bit image with pixel values set to eiter 0 or 255. Usecase: Preparation for optical character recognition. */
  | 'ImageFilterTypePureBinarized'
  /** Cleans up the background and tries to preserve photos within the image. Usecase: magazine pages, flyers. */
  | 'ImageFilterTypeBackgroundClean'
  /** Black and white filter with background cleaning. Creates a grayscaled 8-bit image with mostly black or white pixels. Usecase: Textual documents or documents with black and white illustrations. */
  | 'ImageFilterTypeBlackAndWhite'
  /** A filter for black and white conversion using OTSU binarization. */
  | 'ImageFilterTypeOtsuBinarization'
  /** A filter for black and white conversion primary used for low-contrast documents. */
  | 'ImageFilterTypeDeepBinarization'
  /** A filter that enhances edges in low-contrast documents. */
  | 'ImageFilterTypeEdgeHighlight'
  /** Binarization filter primary inteded to use on low-contrast documents with heavy shadows. */
  | 'ImageFilterTypeLowLightBinarization'
  /** Binarization filter primary intended to use on low-contrast documents with heavy shadows. */
  | 'ImageFilterTypeLowLightBinarization2'
  /** Standard grayscale filter. Creates a grayscaled 8-bit image. */
  | 'ImageFilterTypePureGray';

/** The priorization of still image quality and capturing speed. Has no effect on devices prior to iOS 13.0. iOS only. */
export type CapturePhotoQualityPrioritization =
  /** Captures a still image at the highest possible speed. The quality of the image may be degraded. */
  | 'CapturePhotoQualityPrioritizationSpeed'
  /** Balances capturing speed and image quality equally. This is the default value. */
  | 'CapturePhotoQualityPrioritizationBalanced'
  /** Captures a still image with the best possible quality in terms of noise, frozen motion and detail in low light. The speed of the capturing might be significantly reduced. */
  | 'CapturePhotoQualityPrioritizationQuality';

/** Result of applyImageFilterOnPage */
export interface ApplyImageFilterOnPageResult extends Page {}

/** Result of createPage */
export interface CreatePageResult extends Page {}

/** Result of detectDocumentOnPage */
export interface DetectDocumentOnPageResult extends Page {}

/** Result of recognizeCheck */
export interface RecognizeCheckResult extends CheckRecognizerResult {}

/** Result of rotatePage */
export interface RotatePageResult extends Page {}

/** Result of setDocumentImage */
export interface SetDocumentImageResult extends Page {}

/** Cropping screen accessibility configuration */
export interface CroppingAccessibilityConfiguration {
  /** Text, that is used as an accessibility label for the cancel button */
  cancelButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the cancel button */
  cancelButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the done button */
  doneButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the done button. */
  doneButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the detect button */
  detectButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the detect button */
  detectButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the reset button */
  resetButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the reset button */
  resetButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility hint for the rotate button */
  rotateButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the rotate button */
  rotateButtonAccessibilityHint: string;
}

/** Detect Barcodes On Images Result Field */
export interface DetectBarcodesOnImagesField {
  /** The URI of the image file the barcodes have been detected on */
  imageFileUri: string;

  /** The array of detected barcodes */
  barcodeResults: BarcodeResultField[];
}

/** Document scanner accessibility configuration */
export interface DocumentScannerAccessibilityConfiguration {
  /** Text, that is used as an accessibility label for the flash button. */
  flashButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the flash button. */
  flashButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the multi-page button. */
  multiPageButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the multi-page button. */
  multiPageButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the auto-snapping button. */
  autoSnappingButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the auto-snapping button. */
  autoSnappingButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the cancel button. */
  cancelButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the cancel button. */
  cancelButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the page-amount button. */
  pageCounterButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the page-amount button. */
  pageCounterAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the shutter button. */
  shutterButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the shutter button. */
  shutterButtonAccessibilityHint: string;
}

/** Finder Document scanner accessibility configuration */
export interface FinderDocumentScannerAccessibilityConfiguration {
  /** Text, that is used as an accessibility label for the flash button. */
  flashButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the flash button. */
  flashButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the cancel button. */
  cancelButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the cancel button. */
  cancelButtonAccessibilityHint: string;

  /** Text, that is used as an accessibility label for the shutter button. */
  shutterButtonAccessibilityLabel: string;

  /** Text, that is used as an accessibility hint for the shutter button. */
  shutterButtonAccessibilityHint: string;
}

/** Field display configuration object */
export interface FieldsDisplayConfiguration {
  /** Complete list of available normalized field names is available in the documentation */
  normalizedFieldName: string;

  /** The display text of the field in the list */
  defaultDisplayText: string;

  /** The default display state of a field in the RTU UI, could be hidden by default or visible by default. */
  defaultDisplayState: FieldDisplayState;
}

/** Field display configuration object */
export interface DocumentsDisplayConfiguration {
  /** Complete list of available normalized document names is available in the documentation */
  normalizedDocumentName: string;

  /** The display text of the document in the list */
  defaultDisplayText: string;
}

/** Field display state in the RTU UI */
export type FieldDisplayState =
  /** Field will not be shown in the RTU UI */
  | 'Hidden'
  /** Field will be shown in the RTU UI if its text value isn't an empty string */
  | 'VisibleIfNotEmpty'
  /** Field will be shown in the RTU UI */
  | 'AlwaysVisible';

/** Supported document types */
export type GenericDocumentType =
  /** German ID card, front side */
  | 'DeIdCardFront'
  /** German ID card, back side */
  | 'DeIdCardBack'
  /** German travel passport (Reisepass) */
  | 'DePassport'
  /** German driver license (Führerschein), front side */
  | 'DeDriverLicenseFront'
  /** German driver license (Führerschein), back side */
  | 'DeDriverLicenseBack';

/** Detector mode, classic (OCR based) or ML (machine learning based) approach. */
export type LicensePlateScanStrategy =
  /** OCR based */
  | 'Classic'
  /** Machine learning based */
  | 'MlBased';

/** Configuration for the hint values */
export interface MedicalCertificateUserGuidanceStrings {
  /** Text that is shown on camera open. */
  startScanning: string;

  /** Text that is shown when the camera is seeking for the document on the visible area, shown after the first result from the detector. */
  scanning: string;

  /** Text that is shown when energy saving is active. (iOS only) */
  energySaving: string;

  /** Text that is shown when the camera snaps the image. */
  capturing: string;

  /** Text that is shown when the detector tries to detect the document from the snapped image. */
  processing: string;

  /** Text that is shown when the detector is paused. iOS only. */
  paused: string;
}

/** MRZ Recognizer Result Field */
export interface MRZRecognizerResultField {
  /** The type of the field */
  name: MRZRecognizerResultFieldType;

  /** The value of the recognized field */
  value: string;

  /** The recognition confidence value of the field. */
  confidence: number;
}

/** MRZ Recognizer Result Field Type */
export type MRZRecognizerResultFieldType =
  /** The field describes the birth date. */
  | 'DateOfBirth'
  /** The field describes the expiration date. */
  | 'DateOfExpiry'
  /** The field describes the issuing department. */
  | 'DepartmentOfIssuance'
  /** The field describes the discreet issuing state or organization. */
  | 'DiscreetIssuingStateOrOrganization'
  /** The field describes a document code. */
  | 'DocumentCode'
  /** The field describes the first name. */
  | 'FirstName'
  /** The field describes the gender. */
  | 'Gender'
  /** The field describes the issuing state or organization. */
  | 'IssuingStateOrOrganization'
  /** The field describes the kind of document in Swiss driver license. */
  | 'KindOfDocument'
  /** The field describes the language code in Swiss driver license. */
  | 'LanguageCode'
  /** The field describes the last name. */
  | 'LastName'
  /** The field describes the nationality. */
  | 'Nationality'
  /** Field for optional value */
  | 'Optional1'
  /** Field for optional value */
  | 'Optional2'
  /** The field describes the personal number. */
  | 'PersonalNumber'
  /** The field describes the PIN number in Swiss driver license. */
  | 'PINCode'
  /** The field describes the documents type. */
  | 'TravelDocumentType'
  /** Unclassified field. */
  | 'Unknown'
  /** The field describes the version of the document in Swiss driver license. */
  | 'VersionNumber';

/** MRZ Document Type */
export type MRZDocumentType =
  /** The document is a passport. */
  | 'PASSPORT'
  /** The document is a travel document. */
  | 'TRAVEL_DOCUMENT'
  /** The document is a visa. */
  | 'VISA'
  /** The document is an ID card. */
  | 'ID_CARD'
  /** The document is a Swiss driver license. */
  | 'SWISS_DRIVER_LICENSE'
  /** The document type is unknown */
  | 'UNDEFINED';

/** Image format */
export type StorageImageFormat =
  /** JPG image format */
  | 'JPG'
  /** PNG image format */
  | 'PNG';

/** File encryption mode, 'AES128' or 'AES256'. */
export type FileEncryptionMode =
  /** AES128 encryption mode */
  | 'AES128'
  /** AES256 encryption mode */
  | 'AES256';

/** Configuration for the scanned item */
export interface TextDataScannerStep {
  /** User guidance hint text. */
  guidanceText: string;

  /** Validation pattern to automatically validate recognized text. '?' = any character, '#' - any digit, all other characters represent themselves. An empty string or nil value will disable the validation pattern. */
  pattern: string;

  /** If set to TRUE pattern validation also validates successfully if only a part of the whole recognized text matches the the validation pattern. If set to FALSE, the whole text must match the validation pattern. Applies to pattern validation only. Defaults to FALSE. */
  shouldMatchSubstring: boolean;

  /** The cameras zoom level preferred for this step. The actual zoom might be different from the preferred one to avoid clipping of finder area and maintain its aspect ratio and height */
  preferredZoom: number;

  /** The preferred finder aspect ratio. **/
  aspectRatio: FinderAspectRatio;

  /** The preferred height of the finder for zoom scale 1.0 (unzoomed). The actual finder height might change to maintain aspect ratio and to not clip the screen. Defaults to 40 points. */
  unzoomedFinderHeight: number;

  /** A string (list) of accepted characters during text recognition. If empty or nil, all characters are accepted. Defaults to nil. */
  allowedSymbols: string;

  /** Recognition strategy for the text. */
  textFilterStrategy: TextFilterStrategy;

  /** Threshold used to pause the detection after significant movement occurred. -1 is default value. Default = 0 for textFilterStrategy='DOCUMENT' and 1000 for textFilterStrategy='LCD_DOT_MATRIX_DISPLAY' */
  significantShakeDelay: number;
}

/** Additional parameter for GenericTextRecognizer to set the type of the scanned object */
export type TextFilterStrategy =
  /** Generic document printed on a paper or a card */
  | 'Document'
  /** LCD display */
  | 'LcdDotMatrixDisplay';
