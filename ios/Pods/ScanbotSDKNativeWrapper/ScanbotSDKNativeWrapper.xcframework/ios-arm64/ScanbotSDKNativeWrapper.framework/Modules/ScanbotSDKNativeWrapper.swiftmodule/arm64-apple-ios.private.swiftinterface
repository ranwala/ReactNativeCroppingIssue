// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScanbotSDKNativeWrapper
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreGraphics
import Foundation
import ScanbotSDK
@_exported import ScanbotSDKNativeWrapper
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc extension SBNWReadyToUseUi {
  @objc public static func createBarcodeScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIBarcodeScannerViewController?
}
@_inheritsConvenienceInitializers @objc public class ScanbotStorageUtils : NSObject, SBNWLoggable {
  @objc public static let pluginStorageSubDirectory: String
  @objc public static let pluginInternalStorageSubDirectory: String
  @objc public static var pluginStorageDirectoryURL: URL? {
    @objc get
  }
  @objc public static var pluginStorageDirectoryPath: String {
    @objc get
  }
  @objc public static var applicationSupportFolderURL: URL? {
    @objc get
  }
  @objc public static var scanbotSDKApplicationSupportFolder: URL? {
    @objc get
  }
  @objc public static var pluginStorageDirectoryExists: Bool {
    @objc get
  }
  @objc public static func recreateFolderIfNeeded(_ folderPath: String)
  @objc public static func generateFileNameWithExtension(fileExtension: String) -> String
  @objc public static func generatePluginStorageFilePath(fileExtension: String) -> String
  @objc public static func createImageStorage(subpath: String) -> SBSDKIndexedImageStorage?
  @objc public static func loadImage(imageFilePath: String) -> UIImage?
  @objc public static func loadData(filePath: String) -> Data?
  @objc public static func saveImageInStorage(_ image: UIImage) -> URL?
  @objc public static func removeAllFilesFromPluginStorageDirectory() -> Error?
  @objc public static func imageFileExists(imageFileUri: String) -> Bool
  @objc public static func createRandomTempStorageDirectory() -> URL
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SBNWOperations {
  @objc public static func initializeSDK(options: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func getLicenseInfo(withDelegate delegate: SBNWProxyDelegate)
  @objc public static func getOCRConfigs(withDelegate delegate: SBNWProxyDelegate)
}
public struct SBNWBindingMap<F, T> where F : Swift.Hashable, T : Swift.Hashable {
}
public struct SBNWAnyValueBindingMap<KeyType, ValueType> where KeyType : Swift.Hashable, ValueType : Swift.Equatable {
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createMedicalCertificateScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIMedicalCertificateScannerViewController?
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createBatchBarcodeScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIBarcodesBatchScannerViewController?
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createTextDataScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate, eventEmitterDelegate: SBNWProxyEventEmitterDelegate?) -> SBSDKUITextDataScannerViewController?
}
@_inheritsConvenienceInitializers @objc public class SBNWOperations : NSObject, SBNWLoggable {
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createGenericDocumentRecognizerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIGenericDocumentRecognizerViewController?
}
@_hasMissingDesignatedInitializers public class SBNWJsonConfigurationHelper {
  @objc deinit
}
@objc extension SBNWOperations {
  @objc public static func createPage(imageFileUri: String, delegate: SBNWProxyDelegate)
  @objc public static func createPage(imageFileUri: String) -> [String : Any]?
  @objc public static func removePage(pageDict: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func rotatePage(pageDict: [String : Any], times: Int, delegate: SBNWProxyDelegate)
  @objc public static func setDocumentImage(configuration: [String : Any], delegate: SBNWProxyDelegate)
}
@objc extension SBNWOperations {
  @objc public static func applyImageFilter(imageFileUri: String, filter: String, delegate: SBNWProxyDelegate)
  @objc public static func applyImageFilterOnPage(pageDict: [String : Any], filter: String, delegate: SBNWProxyDelegate)
  @objc public static func getFilteredDocumentPreviewUri(pageDict: [String : Any], filter: String, delegate: SBNWProxyDelegate)
}
@objc public protocol SBNWLogger {
  @objc func logInfo(_ msg: String)
  @objc func logDebug(_ msg: String)
  @objc func logError(_ msg: String)
}
public protocol SBNWLoggable : ObjectiveC.NSObject {
}
extension SBNWLoggable {
  public static func logInfo(_ msg: String)
  public static func logDebug(_ msg: String)
  public static func logError(_ msg: String)
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createMrzScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIMRZScannerViewController?
}
@objc extension SBNWOperations {
  @objc public static func writeTIFF(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func createPDF(imageFileUris: [String], pageSize: String, delegate: SBNWProxyDelegate)
  @objc public static func cleanup(delegate: SBNWProxyDelegate)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SBNWConfiguration : NSObject {
  @objc public var licenseKey: String
  @objc public var loggingEnabled: Bool
  @objc public var storageImageQuality: Int
  @objc public var storageImageFormat: SBSDKImageFileFormat
  @objc public var storageBaseDirectory: String
  @objc public var documentDetectorMode: SBSDKDocumentDetectorMode
  @objc public var fileEncryptionPassword: String
  @objc public var fileEncryptionMode: SBSDKAESEncrypterMode
  @objc deinit
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createEhicScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIHealthInsuranceCardScannerViewController?
}
@objc extension SBNWOperations {
  @objc public static func extractImagesFromPdf(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func extractPagesFromPdf(configuration: [String : Any], delegate: SBNWProxyDelegate)
}
@_inheritsConvenienceInitializers @objc public class JSONUtils : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SBNWProxyDelegate {
  @objc func didResolvePromise(result: [String : Any])
  @objc func didRejectPromise(error: [String : Any])
}
@objc public protocol SBNWProxyEventEmitterDelegate {
  @objc func didEmitEvent(name: String, body: String)
}
@_inheritsConvenienceInitializers @objc open class SBNWReadyToUseUi : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createLicensePlateScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUILicensePlateScannerViewController?
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createCroppingScreenViewController(withPage page: [String : Any], configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUICroppingViewController?
}
@objc public enum SBNWPlatform : Int {
  case unknown
  case cordova
  case reactNative
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SBNWSharedConfiguration : NSObject {
  @objc public var sdkConfiguration: SBNWConfiguration
  @objc public var currentPlatform: SBNWPlatform
  @objc public var isSDKInitialized: Bool
  @objc public var isEncryptionEnabled: Bool
  @objc public var logger: SBNWLogger
  @objc public var imageStorage: SBSDKIndexedImageStorage?
  @objc public static var defaultConfiguration: SBNWSharedConfiguration {
    @objc get
  }
  public static var isSDKInitialized: Bool {
    get
  }
  public static var isEncryptionEnabled: Bool {
    get
  }
  @objc deinit
}
@objc extension SBNWOperations {
  @objc public static func recognizeCheckOnImage(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func detectDocument(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func performOCR(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func recognizeMrz(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func detectBarcodesOnImage(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func detectBarcodesOnImages(configuration: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func detectDocumentOnPage(pageDict: [String : Any], delegate: SBNWProxyDelegate)
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createDocumentScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIDocumentScannerViewController?
}
@_inheritsConvenienceInitializers @objc public class SBNWDiagnosticsDefaultRegistry : NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SBNWOperations {
  @objc public static func rotateImage(imageFileUri: String, degrees: Double, quality: Float = -1.0, delegate: SBNWProxyDelegate)
  @objc public static func estimateBlur(args: [String : Any], delegate: SBNWProxyDelegate)
  @objc public static func getImageDataFromUri(imageFileUri: String) -> Data?
  @objc public static func getImageData(imageFileUri: String, delegate: SBNWProxyDelegate)
  @objc public static func tempImageStorageFromFilesList(imageFileURLs: [URL]) -> SBSDKIndexedImageStorage?
  @objc public static func refreshImageUris(configuration: [String : Any], delegate: SBNWProxyDelegate)
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createCheckRecognizerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUICheckRecognizerViewController?
}
@objc extension SBNWReadyToUseUi {
  @objc public static func createFinderDocumentScannerViewController(configuration: [String : Any], delegate: SBNWProxyDelegate) -> SBSDKUIFinderDocumentScannerViewController?
}
extension ScanbotSDKNativeWrapper.SBNWPlatform : Swift.Equatable {}
extension ScanbotSDKNativeWrapper.SBNWPlatform : Swift.Hashable {}
extension ScanbotSDKNativeWrapper.SBNWPlatform : Swift.RawRepresentable {}
